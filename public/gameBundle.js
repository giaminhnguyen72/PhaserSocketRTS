(()=>{"use strict";class t{constructor(t={keyboard:!1,mouse:!1}){this.tag="EVENTHANDLER",this.components=[],this.events=[],this.eventConfig=t,window.addEventListener("click",(t=>{this.events.push("click")})),window.addEventListener("keydown",(t=>{console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key)}))}update(t){for(var e of(console.log("Event Handler"),this.components)){console.log("Has Component");var s=e.eventMap;for(var n of this.events)if(s){var i=s.get(n);i&&(i(),console.log("Has Ran"))}e.update(t)}this.events=[]}}class e{constructor(t){this.tag="GRAPHICS",this.graphicsConfig=t,this.components=[],document.documentElement.style.height="100%",document.documentElement.style.width="100%",document.body.style.height="100%",document.body.style.width="100%",document.body.style.margin="0",this.setup(),this.canvas=this.generateCanvas(),this.ctx=this.canvas.getContext("2d"),this.div=this.generateDiv(this.graphicsConfig.parent),this.entities=[]}update(t){for(var e of(console.log("Graphics"),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.components))console.log(e.componentId),e.update(t,this.ctx),console.log("Inside Graphics Component"),console.log(e.componentId)}generateDiv(t){var e=document.createElement("div");return e.id=t,e.style.position="absolute",e.style.height="100%",e.style.width="100%",e.style.zIndex="1",e.style.backgroundImage="/images/test.jpg",e.appendChild(this.canvas),document.body.appendChild(e),console.log("test"),e}generateCanvas(){var t=document.createElement("CANVAS");return t.id=this.graphicsConfig.canvasID,console.log(this.parseStyle(this.graphicsConfig.style)),console.log("Before"),t.setAttribute("style",this.parseStyle(this.graphicsConfig.style)),t}getCtx(){return this.getCanvas().getContext("2d")}getCanvas(){var t=document.getElementById(this.graphicsConfig.canvasID);if(t instanceof HTMLCanvasElement)return t;throw Error("engineCanvas should be a reserved id for DOM Components")}parseStyle(t){var e=Object.entries(t).map((([t,e])=>t+":"+e+";"));return console.log(this.graphicsConfig.parent),e.join(" ")}setup(){var t=new Image;t.src="/images/test.jpg",t.style.position="absolute",t.style.zIndex="-1",t.style.width="100%",t.style.height="100%",document.body.appendChild(t)}}class s{constructor(){this.tag="PHYSICS",this.components=[]}update(t){for(var e of this.components)e.update(t)}}class n{constructor(t="engineDiv",e="engineCanvas",s={},n){this.parent=t,this.canvasID=e,this.style=s,this.background=n}}class i{}class o{constructor(t,e=[],s){this.name=t,this.entities=e,this.background=s}}class r{constructor(t,e){for(var s of(this.name=t.name,this.entities=new Map,this.engineComponents=new Map,e))this.engineComponents.set(s.tag,[]);for(var n of t.entities)this.addEntity(n);console.log(this.engineComponents),this.background=t.background,this.time=0}addEntity(t){var e=a.getUniqueId();for(var s of(t.id=e,t.scene=this,this.entities.set(e,t),t.components)){var n=this.engineComponents.get(s.engineTag);if(!n){for(var i of(console.log(s.engineTag),this.engineComponents.keys()))console.log(i);throw Error("something wrong adding entities")}n.push(this.createComponent(s))}}removeEntity(t){var e=this.getEntity(t);if(e)for(var s of e.components){var n=this.engineComponents.get(s.engineTag);if(n)for(var i=0;i<n.length;i++)n[i].entity==e&&n.splice(i,1)}return e}getEntity(t){return this.entities.get(t)}createComponent(t){return t.componentId=a.getUniqueComponentId(),t}}class a{constructor(t=[new o("Default")],e,s=0){this.sceneConfigs=t,this.scenes=[];for(var n=0;n<t.length;n++){var i=t[n];console.log("In Scene Manager"),console.log(e),this.scenes.push(new r(i,e))}this.sceneConfigs=t,this.currentIdx=s}switchScenes(t){return this.currentIdx=t,this.getCurrentScene()}getCurrentScene(){return this.scenes[this.currentIdx]}getCurrentEntities(){return this.scenes[this.currentIdx].entities}addCurrentEntity(t){}static getUniqueId(){return a.id++}static getUniqueComponentId(){return a.componentId++}}a.id=0,a.componentId=0;class h{constructor(n=new i,o){if(this.canvasID="engineCanvas",this.systems=[],this.time=0,this.engineConfig=n,this.engineConfig.eventConfig&&this.systems.push(new t(this.engineConfig.eventConfig)),this.engineConfig.physicsConfig&&this.systems.push(new s),o)for(var r of o)this.systems.push(r);for(var r of(this.engineConfig.graphicsConfig&&(this.graphics=new e(this.engineConfig.graphicsConfig),this.systems.push(this.graphics)),this.sceneManager=new a(this.engineConfig.sceneConfig,this.systems),this.running=!0,this.systems)){var h=this.sceneManager.getCurrentScene().engineComponents.get(r.tag);if(!h)throw Error("error in start method");r.components=h}this.running=!1}start(t){if(this.running=!0,this.graphics)this.update(t),window.requestAnimationFrame((()=>this.start(t)));else for(;this.running;)this.update(t)}update(t){for(var e of this.systems)e.update(t);this.time+=t,console.log(this.time)}}class c{constructor(t,e={x:0,y:0,z:0},s={x:0,y:0,z:0},n={x:0,y:0,z:0}){this.engineTag="PHYSICS",this.entity=t,this.pos=e,this.vel=s,this.accel=n}update(t){this.vel.x=this.vel.x+this.accel.x*t,this.vel.y=this.vel.y+this.accel.y*t,this.vel.z=this.vel.z+this.accel.z*t,this.pos.x=this.pos.x+this.vel.x*t,this.pos.y=this.pos.y+this.vel.y*t,this.pos.z=this.pos.z+this.vel.z*t}}class g{constructor(t,e){this.engineTag="GRAPHICS",this.entity=t,this.transform=e}update(t,e){if(e){var s=255*Math.random(),n=255*Math.random(),i=255*Math.random();e.fillStyle=`rgb(\n                ${s},\n                ${n},\n                ${i})`,e.fillRect(this.transform.pos.x,this.transform.pos.y,20,20)}}}class l{constructor(t,e){this.engineTag="EVENTHANDLER",this.entity=t,this.eventMap=new Map,Object.entries(e).map((([t,e])=>{this.eventMap.set(t,e)}))}update(t,e){console.log("In mouse Listener")}}class d{constructor(){this.transform=new c(this,{x:20,y:20,z:20},{x:1,y:1,z:0}),this.renderer=new g(this,this.transform),this.listener=new l(this,{click:()=>{this.transform.pos.x=0,this.transform.pos.y=0},test2:()=>{console.log("test2")}}),this.components=[this.transform,this.renderer,this.listener]}}window.onload=()=>{new h({physicsConfig:{},graphicsConfig:new n("test","193as",{"background-color":"white",width:"100%",height:"100%"}),sceneConfig:[{name:"as",entities:[new d]}],eventConfig:{keyboard:!0,mouse:!0}}).start(1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,