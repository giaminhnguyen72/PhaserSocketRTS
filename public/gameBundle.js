(()=>{"use strict";var t,e={d:(t,s)=>{for(var n in s)e.o(s,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:s[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},s={};function n(t,e,s){var n=o.getUniqueId();for(var i of(e.id=n,e.scene=t,t.entities.set(n,e),e.components))if(t.engineComponents.get(i.engineTag)){let e=t.sceneManager.systemTag.get(i.engineTag);e&&e.register(i)}else console.log(i.engineTag+" tagged System is not found");return console.log("successfully added entitys"),e}function i(t,e){var s=o.getUniqueId();for(var n of(e.id=s,e.scene=t,t.entities.set(s,e),e.components)){var i=t.engineComponents.get(n.engineTag);if(n.entity=e.id,i){let e=t.sceneManager.systemTag.get(n.engineTag);e&&e.register(n)}else console.log(n.engineTag+"does not exist"),n.componentId=o.getUniqueComponentId()}return console.log("successfully added entity"),e}e.r(s),e.d(s,{Decoder:()=>At,Encoder:()=>Ot,PacketType:()=>Rt,protocol:()=>St}),function(t){t[t.SOCKETCLIENT=0]="SOCKETCLIENT",t[t.SOCKETSERVER=1]="SOCKETSERVER",t[t.CLIENTONLY=2]="CLIENTONLY"}(t||(t={}));class o{constructor(e,s=[],o){this.systems=o,this.systemTag=new Map,this.scenes=new Map,this.engineConfig=e,e.engineType==t.SOCKETCLIENT?this.addEntity=n:(t.SOCKETSERVER,this.addEntity=i);for(let t=0;t<s.length;t++){let e=s[t].scene;e.sceneManager=this,e.engineComponents=new Map,e.addEntity=this.addEntity,console.log("In Scene Manager"),this.scenes.set(e.name,e)}this.sceneConfigs=s,this.currentIdx=this.sceneConfigs[0].scene.name,this.systems=o}switchScenes(t){let e=this.scenes.get(t);if(e)for(var s of this.systems)if(!e.engineComponents.get(s.tag))throw Error("error in start method")}getCurrentScene(){let t=this.scenes.get(this.currentIdx);if(t)return t;throw Error("Cant get current scene")}static getUniqueId(){return o.id++}static getUniqueComponentId(){return o.componentId++}}o.id=0,o.componentId=0;class r{constructor(t={keyboard:!1,mouse:!1}){this.tag="EVENTHANDLER",this.deleted=[],this.components=new Map,this.events=[],this.eventConfig=t,window.addEventListener("click",(t=>{this.events.push("click")})),window.addEventListener("keydown",(t=>{this.events.push(t.key)}))}register(t){if(null==t.componentId||null==t.componentId){let e=o.getUniqueComponentId();t.componentId=e,t.system=this,this.components.set(e,t)}console.log("Event Handler registered")}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){console.log("Event Handler"),console.log("Event  Handler Components:"+this.components.size),this.components.size;let e=[...this.components.keys()];for(var s of e){var n=this.components.get(s),i=n.eventMap;for(var o of this.events)if(i){var r=i.get(o);r&&r()}n.update(t)}for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(null==t?void 0:t.componentId)}this.events=[]}}class h{constructor(){this.items=[],this.size=0}clear(){this.items.length=0}swap(t,e){var s=this.items[t];this.items[t]=this.items[e],this.items[e]=s}enqueue(t,e){this.items.push({data:t,priority:e});let s=this.items.length-1;for(var n=Math.floor((s-1)/2);s>0&&this.items[s].priority>this.items[n].priority;)this.swap(s,n),s=n,n=Math.floor((s-1)/2);this.size++}dequeue(){if(0==this.size)return;if(1==this.size)return this.size--,this.items[0].data;let t=this.items[0];this.size--;let e=this.items.pop();if(e){this.items[0]=e;for(let t=0;t<this.items.length;t++);}let s=0;for(;s<=this.size-1;){let t=2*s+1,e=2*s+2;if(t<=this.size-1&&e<=this.size-1){let n=this.items[t].priority>this.items[e].priority?t:e;if(!(this.items[n].priority>this.items[s].priority))break;this.swap(s,n),s=n}else{if(!(t<=this.size-1))break;if(!(this.items[t].priority>this.items[s].priority))break;this.swap(s,t),s=t}}return t.data}}class a{constructor(){this.queue=new h}render(t){console.log("Inside Painrer");for(let e of t){let t=[];for(console.log("Inside Camera loop");0!=this.queue.size;)t.push(this.queue.dequeue()),console.log("Render Queue size is "+this.queue.size);e.render(t)}}registerStrategy(t){this.queue.enqueue(t,t.transform.pos.z)}clear(){this.queue.clear(),console.log("Cleared queue length is "+this.queue.size)}}class c{constructor(t,e){this.tag="GRAPHICS",this.rendering=[],this.graphicsConfig=t,this.components=new Map,this.deleted=[],document.documentElement.style.height="100%",document.documentElement.style.width="100%",document.body.style.height="100%",document.body.style.width="100%",document.body.style.margin="0",this.renderStrategy=new a,this.contextInfo=e}register(t){if(null==t.componentId||null==t.componentId){console.log("Registering undefined id in Ggraphics");let e=o.getUniqueComponentId();t.componentId=e,t.system=this,t.context=this.contextInfo,1==t.rendered&&this.rendering.push(t),t.initialize(),this.components.set(e,t)}else console.log("Graphics Registering id"+t.componentId),t.system=this,t.context=this.contextInfo,1==t.rendered&&this.rendering.push(t),t.initialize(),this.components.set(t.componentId,t)}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e),console.log(e.entity+" s Component with id "+e.componentId+"is popped"))}update(t){this.contextInfo.ctx,console.log("Graphics engine running"),console.log("Graphics Components: "+this.components.size);for(let e of this.components){let s=e[1];s.update(t),0==s.rendered&&this.renderStrategy.registerStrategy(s)}for(console.log("Rendering Components: "+this.rendering.length),this.renderStrategy.render(this.rendering),this.renderStrategy.clear();this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(null==t?void 0:t.componentId)}}setScene(t){t.engineComponents.get(this.tag)}}class l{constructor(t){this.tag="PHYSICS",this.deleted=[],this.components=new Map,this.config=t}register(t){if(null==t.componentId||null==t.componentId){let e=o.getUniqueComponentId();t.componentId=e,t.system=this,this.components.set(e,t)}else t.system=this,this.components.set(t.componentId,t)}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e),console.log(e.entity+" s Component with id "+e.componentId+"is popped"))}update(t){for(var e of(console.log("Physics engine running"),console.log("Physics Components: "+this.components.size),this.components))e[1].update(t);for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(null==t?void 0:t.componentId)}}}class p{constructor(){this.tag="SCRIPTING",this.deleted=[],this.components=new Map}register(t){if(null==t.componentId||null==t.componentId){let e=o.getUniqueComponentId();t.componentId=e,t.system=this,this.components.set(e,t)}else t.componentId=t.componentId,t.system=this,this.components.set(t.componentId,t)}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){for(var e of(console.log("Scripting engine running"),console.log("Scripting Components: "+this.components.size),this.components))e[1].callback(t);for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(null==t?void 0:t.componentId)}}}class d{constructor(t){this.graphicsConfig=t,this.graphicsConfig=t,document.documentElement.style.height="100%",document.documentElement.style.width="100%",document.body.style.height="100%",document.body.style.width="100%",document.body.style.margin="0",this.setup(),this.canvas=this.generateCanvas(),this.canvas.width=1e3,this.canvas.height=500,this.ctx=this.canvas.getContext("2d"),this.div=this.generateDiv(this.graphicsConfig.parent)}generateDiv(t){var e=document.createElement("div");return e.id=t,e.style.position="absolute",e.style.height="100%",e.style.width="100%",e.style.zIndex="1",e.style.backgroundImage="/images/test.jpg",e.appendChild(this.canvas),document.body.appendChild(e),console.log("test"),e}generateCanvas(){var t=document.createElement("CANVAS");return t.id=this.graphicsConfig.canvasID,console.log(this.parseStyle(this.graphicsConfig.style)),console.log("Before"),t.setAttribute("style",this.parseStyle(this.graphicsConfig.style)),t}getCtx(){return this.getCanvas().getContext("2d")}getCanvas(){var t=document.getElementById(this.graphicsConfig.canvasID);if(t instanceof HTMLCanvasElement)return t;throw Error("engineCanvas should be a reserved id for DOM Components")}parseStyle(t){var e=Object.entries(t).map((([t,e])=>t+":"+e+";"));return console.log(this.graphicsConfig.parent),e.join(" ")}setup(){var t=new Image;t.src="/images/test.jpg",t.style.position="absolute",t.style.zIndex="-1",t.style.width="100%",t.style.height="100%",document.body.appendChild(t)}}class u{constructor(t){this.tag="COLLISION",this.components=new Map,this.config=t,this.deleted=[]}register(t){if(null==t.componentId||null==t.componentId){let e=o.getUniqueComponentId();t.componentId=e,t.system=this,this.components.set(e,t)}else t.system=this,this.components.set(t.componentId,t)}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){for(var[e,s]of(console.log("Collision System Running"),console.log("Collision Components: "+this.components.size),this.components))if(s.visible)for(var[n,i]of this.components)i.visible&&s.checkCollision(i)&&s!=i?s.collides(i):i.alive||this.deleted.push(i);for(;this.deleted.length>0;){let t=this.deleted.pop();t&&this.deleteComponent(t)}}deleteComponent(t){t.componentId&&this.components.delete(t.componentId)}}class f{constructor(e={engineType:t.CLIENTONLY},s){if(this.canvasID="engineCanvas",this.systems=[],this.time=0,this.engineConfig=e,e.graphicsConfig&&(this.contextInfo=new d(e.graphicsConfig)),this.engineConfig.eventConfig&&this.contextInfo&&this.systems.push(new r(this.engineConfig.eventConfig)),this.engineConfig.physicsConfig&&this.systems.push(new l(this.engineConfig.physicsConfig)),this.engineConfig.scriptingConfig&&this.systems.push(new p),s)for(var n of s)this.systems.push(n);if(this.engineConfig.collisionConfig&&this.systems.push(new u(this.engineConfig.collisionConfig)),this.engineConfig.graphicsConfig&&this.contextInfo&&(this.graphics=new c(this.engineConfig.graphicsConfig,this.contextInfo),this.systems.push(this.graphics)),s)for(var n of s)this.systems.push(n);this.sceneManager=new o(this.engineConfig,this.engineConfig.sceneConfig,this.systems),this.running=!0,this.running=!1}start(e){this.running=!0,console.log("Startng Engin ");let s=this.sceneManager.getCurrentScene();for(var n of this.systems){var i=this.sceneManager.getCurrentScene().engineComponents.set(n.tag,n.components);if(s.engineComponents.set(n.tag,n.components),this.sceneManager.systemTag.set(n.tag,n),!i)throw Error("error in start method")}let o=s.entities;s.entities=new Map;for(let t of o)t[1].id?s.addEntity(s,t[1],t[1].id):s.addEntity(s,t[1],1);this.engineConfig.engineType==t.CLIENTONLY||this.engineConfig.engineType==t.SOCKETCLIENT?this.update(e):setTimeout((()=>{this.running&&this.serverUpdate(e),console.log("Timeout runout")}),e)}update(t){for(var e of this.systems)e.update(t);this.time+=t,console.log(this.time),window.requestAnimationFrame((e=>{this.time,this.update(t),this.time=e}))}serverUpdate(t){for(var e of(console.log("updating"),this.systems))e.update(t);this.time+=t,console.log(this.time),setTimeout((()=>{this.running&&this.serverUpdate(t)}),t)}}class g{constructor(t="engineDiv",e="engineCanvas",s={},n){this.parent=t,this.canvasID=e,this.style=s,this.background=n}}class m{constructor(t,e={x:0,y:0,z:0},s={x:0,y:0,z:0},n={x:0,y:0,z:0}){this.visible=!0,this.alive=!0,this.engineTag="PHYSICS",this.entity=t,this.pos=e,this.vel=s,this.accel=n}copy(t){this.pos.x=t.pos.x,this.pos.y=t.pos.y,this.pos.z=t.pos.z,this.vel.x=t.vel.x,this.vel.x=t.vel.x,this.vel.x=t.vel.x,this.accel.x=t.accel.x,this.accel.x=t.accel.x,this.accel.x=t.accel.x,this.entity=t.entity,this.componentId=t.componentId,this.visible=t.visible,this.alive=t.alive}update(t){console.log("Position is: "+this.pos.x+" and "+this.pos.y),this.vel.x=this.vel.x+this.accel.x*t,this.vel.y=this.vel.y+this.accel.y*t,this.vel.z=this.vel.z+this.accel.z*t,this.pos.x=this.pos.x+this.vel.x*t,this.pos.y=this.pos.y+this.vel.y*t,this.pos.z=this.pos.z+this.vel.z*t}toJSON(){return{pos:this.pos,vel:this.vel,accel:this.accel,entity:this.entity,componentId:this.componentId,visible:this.visible,alive:this.alive,engineTag:"PHYSICS"}}}class y{constructor(t,e,s){this.engineTag="GRAPHICS",this.rendered=!1,this.visible=!0,this.alive=!0,this.entity=t,this.transform=e,this.src=s}copy(t){this.componentId=t.componentId,this.entity=t.entity,this.src=t.src,this.transform.accel.x=t.transform.accel.x,this.transform.accel.y=t.transform.accel.y,this.transform.accel.z=t.transform.accel.z,this.transform.vel.x=t.transform.vel.x,this.transform.vel.y=t.transform.vel.y,this.transform.vel.z=t.transform.vel.z,this.transform.pos.x=t.transform.pos.x,this.transform.pos.y=t.transform.pos.y,this.transform.pos.z=t.transform.pos.z}visit(t){}render(){this.context.ctx&&this.context.ctx.drawImage(this.image,this.transform.pos.x,this.transform.pos.y,64,64)}update(t){}initialize(){this.image=new Image,this.image.src=this.src}toJSON(){return{entity:this.entity,componentId:this.componentId,engineTag:this.engineTag,transform:this.transform,visible:this.visible,alive:this.alive,src:this.src}}}class v{update(t,e){}constructor(t,e){this.engineTag="GRAPHICS",this.rendered=!1,this.visible=!0,this.alive=!0,this.entity=t,this.transform=e}visit(t){}copy(t){throw new Error("Method not implemented.")}initialize(){}render(){if(this.context.ctx){var t=255*Math.random(),e=255*Math.random(),s=255*Math.random();this.context.ctx.fillStyle=`rgb(\n                ${t},\n                ${e},\n                ${s})`,this.context.ctx.fillRect(this.transform.pos.x,this.transform.pos.y,20,20)}}}class b{constructor(t,e){this.engineTag="EVENTHANDLER",this.visible=!0,this.alive=!0,this.entity=t,this.eventMap=new Map,Object.entries(e).map((([t,e])=>{this.eventMap.set(t,e)}))}copy(t){this.entity=t.entity,this.componentId=t.componentId,this.visible=t.visible,this.alive=t.alive}update(t,e){console.log("In mouse Listener")}toJSON(){return{entity:this.entity,engineTag:"EVENTHANDLER",componentId:this.componentId,onePunch:"Test"}}}class w{constructor(t){this.engineTag="SCRIPTING",this.visible=!0,this.alive=!0,this.callback=t}copy(t){}update(t,e){this.callback(t)}toJSON(){return{entity:this.entity,engineTag:this.engineTag,componenId:this.componentId,callback:this.callback}}}class C{visit(t){}constructor(t=-1,e={x:0,y:0,z:0},s){this.engineTag="COLLISION",this.visible=!0,this.alive=!0,this.entity=t,this.collideType="Box",this.shape={pos:e,dim:{length:20,height:20},rot:0},this.prev={x:e.x,y:e.y,z:e.z},this.onCollision=s}copy(t){}checkCollision(t){if(t instanceof C){let e=t.shape,s=this.shape;if(0==e.rot&&0==s.rot)return e.pos.x+e.dim.length>s.pos.x&&e.pos.x<s.pos.x+s.dim.length&&e.pos.y+e.dim.height>s.pos.y&&e.pos.y<s.pos.y+s.dim.height}return!1}collides(t){this.onCollision(t)}update(t,e){this.prev.x=this.shape.pos.x,this.prev.y=this.shape.pos.y,this.prev.z=this.shape.pos.z}}class x{constructor(t={x:0,y:0,z:0},e={x:Math.random(),y:Math.random(),z:Math.random()}){this.className="Player",this.transform=new m(-1,t,e);var s=new w((t=>{this.transform.pos.x,this.transform.pos.x<0?(this.transform.pos.x=0,this.transform.vel.x*=-1*Math.random()*2):this.transform.pos.x+20>1e3&&(this.transform.pos.x=980,this.transform.vel.x*=-1*Math.random()*2),this.transform.pos.y<0?(this.transform.pos.y=0,this.transform.vel.y*=-1*Math.random()*2):this.transform.pos.y+20>500&&(this.transform.pos.y=480,this.transform.vel.y*=-1*Math.random()*2)}));this.renderer=new v(-1,this.transform),this.listener=new b(-1,{click:()=>{this.scene&&this.scene.addEntity(this.scene,new x({x:0,y:0,z:0},{x:0,y:1,z:0}),-1),this.transform.vel.x*=-1*Math.random()*2,this.transform.vel.y*=-1*Math.random()*2},test2:()=>{}});let n=new y(-1,this.transform,"/images/Knight_Forward.png");new C(-1,this.transform.pos,(t=>{this.transform.vel.x*=-1,this.transform.vel.y*=-1})),this.components=[this.transform,n,s,this.listener]}}class E{constructor(){this.className="Templar",this.transform=new m(-1,{x:0,y:0,z:20},{x:2,y:2,z:0}),this.components=[new y(-1,this.transform,"/images/Templar.png")]}}class k{constructor(t=-1,e=-1,s=-1,n={x:0,y:0,z:0},i={x:1,y:1}){this.visible=!0,this.alive=!0,this.engineTag="GRAPHICS",this.rendered=!0,this.height=s,this.width=e,this.pos=n,this.transform=new m(t,{x:0,y:0,z:0}),this.entity=t,this.scale=i}copy(t){this.entity=t.entity,this.componentId=t.componentId,this.width=t.width,this.height=t.height,this.visible=t.visible,this.alive=t.alive,this.scale.x=t.scale.x,this.scale.y=t.scale.y}initialize(){}update(t){let e=this.context.ctx;this.height<0&&(this.height=-1*this.height*this.context.canvas.height),this.width<0&&(this.width=-1*this.width*this.context.canvas.width),this.pos.x+=this.transform.pos.x,this.pos.y+=this.transform.pos.y,this.context.ctx.translate(this.transform.pos.x,this.transform.pos.y),e.clearRect(-1*this.pos.x,-1*this.pos.y,this.width,this.height),this.transform.pos.x=0,this.transform.pos.y=0,this.context.ctx.save()}render(t){let e=t;for(let s of e)s!=this&&s.render(t)}}class I{constructor(){this.camera=new k(-1),this.className="MainCamera",this.components=[this.camera,new b(-1,{w:()=>{this.camera.transform.pos.y-=1},a:()=>{this.camera.transform.pos.x-=1},d:()=>{this.camera.transform.pos.x+=1},s:()=>{this.camera.transform.pos.y+=1}})]}}const T=Object.create(null);T.open="0",T.close="1",T.ping="2",T.pong="3",T.message="4",T.upgrade="5",T.noop="6";const S=Object.create(null);Object.keys(T).forEach((t=>{S[T[t]]=t}));const R={type:"error",data:"parser error"},O="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),A="function"==typeof ArrayBuffer,_=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+t)},s.readAsDataURL(t)},N=({type:t,data:e},s,n)=>{return O&&e instanceof Blob?s?n(e):_(e,n):A&&(e instanceof ArrayBuffer||(i=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(i):i&&i.buffer instanceof ArrayBuffer))?s?n(e):_(new Blob([e]),n):n(T[t]+(e||""));var i},L="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",B="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let t=0;t<L.length;t++)B[L.charCodeAt(t)]=t;const M="function"==typeof ArrayBuffer,z=(t,e)=>{if(M){const s=(t=>{let e,s,n,i,o,r=.75*t.length,h=t.length,a=0;"="===t[t.length-1]&&(r--,"="===t[t.length-2]&&r--);const c=new ArrayBuffer(r),l=new Uint8Array(c);for(e=0;e<h;e+=4)s=B[t.charCodeAt(e)],n=B[t.charCodeAt(e+1)],i=B[t.charCodeAt(e+2)],o=B[t.charCodeAt(e+3)],l[a++]=s<<2|n>>4,l[a++]=(15&n)<<4|i>>2,l[a++]=(3&i)<<6|63&o;return c})(t);return P(s,e)}return{base64:!0,data:t}},P=(t,e)=>"blob"===e&&t instanceof ArrayBuffer?new Blob([t]):t,q=(t,e)=>{if("string"!=typeof t)return{type:"message",data:P(t,e)};const s=t.charAt(0);return"b"===s?{type:"message",data:z(t.substring(1),e)}:S[s]?t.length>1?{type:S[s],data:t.substring(1)}:{type:S[s]}:R},j=String.fromCharCode(30);function D(t){if(t)return function(t){for(var e in D.prototype)t[e]=D.prototype[e];return t}(t)}D.prototype.on=D.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},D.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},D.prototype.off=D.prototype.removeListener=D.prototype.removeAllListeners=D.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<n.length;i++)if((s=n[i])===e||s.fn===e){n.splice(i,1);break}return 0===n.length&&delete this._callbacks["$"+t],this},D.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(s){n=0;for(var i=(s=s.slice(0)).length;n<i;++n)s[n].apply(this,e)}return this},D.prototype.emitReserved=D.prototype.emit,D.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},D.prototype.hasListeners=function(t){return!!this.listeners(t).length};const H="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function U(t,...e){return e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})}const F=setTimeout,V=clearTimeout;function K(t,e){e.useNativeTimers?(t.setTimeoutFn=F.bind(H),t.clearTimeoutFn=V.bind(H)):(t.setTimeoutFn=setTimeout.bind(H),t.clearTimeoutFn=clearTimeout.bind(H))}class Y extends Error{constructor(t,e,s){super(t),this.description=e,this.context=s,this.type="TransportError"}}class J extends D{constructor(t){super(),this.writable=!1,K(this,t),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e,s){return super.emitReserved("error",new Y(t,e,s)),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(t){const e=q(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){super.emitReserved("packet",t)}onClose(t){this.readyState="closed",super.emitReserved("close",t)}}const G="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),$={};let W,X=0,Q=0;function Z(t){let e="";do{e=G[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function tt(){const t=Z(+new Date);return t!==W?(X=0,W=t):t+"."+Z(X++)}for(;Q<64;Q++)$[G[Q]]=Q;function et(t){let e="";for(let s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e}let st=!1;try{st="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){}const nt=st;function it(t){const e=t.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!e||nt))return new XMLHttpRequest}catch(t){}if(!e)try{return new(H[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}function ot(){}const rt=null!=new it({xdomain:!1}).responseType;class ht extends D{constructor(t,e){super(),K(this,e),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=U(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new it(t);try{e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},e.send(this.data)}catch(t){return void this.setTimeoutFn((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=ht.requestsCount++,ht.requests[this.index]=this)}onError(t){this.emitReserved("error",t,this.xhr),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=ot,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete ht.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&(this.emitReserved("data",t),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}function at(){for(let t in ht.requests)ht.requests.hasOwnProperty(t)&&ht.requests[t].abort()}ht.requestsCount=0,ht.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",at):"function"==typeof addEventListener&&addEventListener("onpagehide"in H?"pagehide":"unload",at,!1));const ct="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):(t,e)=>e(t,0),lt=H.WebSocket||H.MozWebSocket,pt="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),dt={websocket:class extends J{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=pt?{}:U(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=pt?new lt(t,e,s):e?new lt(t,e):new lt(t)}catch(t){return this.emitReserved("error",t)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=t=>this.onClose({description:"websocket connection closed",context:t}),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],n=e===t.length-1;N(s,this.supportsBinary,(t=>{try{this.ws.send(t)}catch(t){}n&&ct((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let s="";this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=tt()),this.supportsBinary||(t.b64=1);const n=et(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(n.length?"?"+n:"")}check(){return!!lt}},polling:class extends J{constructor(t){if(super(t),this.polling=!1,"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?"443":"80"),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=rt&&!e}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(t++,this.once("pollComplete",(function(){--t||e()}))),this.writable||(t++,this.once("drain",(function(){--t||e()})))}else e()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(t){((t,e)=>{const s=t.split(j),n=[];for(let t=0;t<s.length;t++){const i=q(s[t],e);if(n.push(i),"error"===i.type)break}return n})(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const t=()=>{this.write([{type:"close"}])};"open"===this.readyState?t():this.once("open",t)}write(t){this.writable=!1,((t,e)=>{const s=t.length,n=new Array(s);let i=0;t.forEach(((t,o)=>{N(t,!1,(t=>{n[o]=t,++i===s&&e(n.join(j))}))}))})(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let s="";!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=tt()),this.supportsBinary||t.sid||(t.b64=1),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port);const n=et(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(n.length?"?"+n:"")}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new ht(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",((t,e)=>{this.onError("xhr post error",t,e)}))}doPoll(){const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",((t,e)=>{this.onError("xhr poll error",t,e)})),this.pollXhr=t}}},ut=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,ft=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function gt(t){const e=t,s=t.indexOf("["),n=t.indexOf("]");-1!=s&&-1!=n&&(t=t.substring(0,s)+t.substring(s,n).replace(/:/g,";")+t.substring(n,t.length));let i=ut.exec(t||""),o={},r=14;for(;r--;)o[ft[r]]=i[r]||"";return-1!=s&&-1!=n&&(o.source=e,o.host=o.host.substring(1,o.host.length-1).replace(/;/g,":"),o.authority=o.authority.replace("[","").replace("]","").replace(/;/g,":"),o.ipv6uri=!0),o.pathNames=function(t,e){const s=e.replace(/\/{2,9}/g,"/").split("/");return"/"!=e.slice(0,1)&&0!==e.length||s.splice(0,1),"/"==e.slice(-1)&&s.splice(s.length-1,1),s}(0,o.path),o.queryKey=function(t,e){const s={};return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,n){e&&(s[e]=n)})),s}(0,o.query),o}class mt extends D{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=gt(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=gt(e.host).host),K(this,e),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=function(t){let e={},s=t.split("&");for(let t=0,n=s.length;t<n;t++){let n=s[t].split("=");e[decodeURIComponent(n[0])]=decodeURIComponent(n[1])}return e}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){const e=Object.assign({},this.opts.query);e.EIO=4,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new dt[t](s)}open(){let t;if(this.opts.rememberUpgrade&&mt.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(t=>this.onClose("transport close",t)))}probe(t){let e=this.createTransport(t),s=!1;mt.priorWebsocketSuccess=!1;const n=()=>{s||(e.send([{type:"ping",data:"probe"}]),e.once("packet",(t=>{if(!s)if("pong"===t.type&&"probe"===t.data){if(this.upgrading=!0,this.emitReserved("upgrading",e),!e)return;mt.priorWebsocketSuccess="websocket"===e.name,this.transport.pause((()=>{s||"closed"!==this.readyState&&(c(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emitReserved("upgrade",e),e=null,this.upgrading=!1,this.flush())}))}else{const t=new Error("probe error");t.transport=e.name,this.emitReserved("upgradeError",t)}})))};function i(){s||(s=!0,c(),e.close(),e=null)}const o=t=>{const s=new Error("probe error: "+t);s.transport=e.name,i(),this.emitReserved("upgradeError",s)};function r(){o("transport closed")}function h(){o("socket closed")}function a(t){e&&t.name!==e.name&&i()}const c=()=>{e.removeListener("open",n),e.removeListener("error",o),e.removeListener("close",r),this.off("close",h),this.off("upgrading",a)};e.once("open",n),e.once("error",o),e.once("close",r),this.once("close",h),this.once("upgrading",a),e.open()}onOpen(){if(this.readyState="open",mt.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data)}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.maxPayload=t.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const t=this.getWritablePackets();this.transport.send(t),this.prevBufferLen=t.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let t=1;for(let s=0;s<this.writeBuffer.length;s++){const n=this.writeBuffer[s].data;if(n&&(t+="string"==typeof(e=n)?function(t){let e=0,s=0;for(let n=0,i=t.length;n<i;n++)e=t.charCodeAt(n),e<128?s+=1:e<2048?s+=2:e<55296||e>=57344?s+=3:(n++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))),s>0&&t>this.maxPayload)return this.writeBuffer.slice(0,s);t+=2}var e;return this.writeBuffer}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,n){if("function"==typeof e&&(n=e,e=void 0),"function"==typeof s&&(n=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const i={type:t,data:e,options:s};this.emitReserved("packetCreate",i),this.writeBuffer.push(i),n&&this.once("flush",n),this.flush()}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},e=()=>{this.off("upgrade",e),this.off("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(t){mt.priorWebsocketSuccess=!1,this.emitReserved("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const n=t.length;for(;s<n;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}}mt.protocol=4,mt.protocol;const yt="function"==typeof ArrayBuffer,vt=Object.prototype.toString,bt="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===vt.call(Blob),wt="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===vt.call(File);function Ct(t){return yt&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||bt&&t instanceof Blob||wt&&t instanceof File}function xt(t,e){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let e=0,s=t.length;e<s;e++)if(xt(t[e]))return!0;return!1}if(Ct(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return xt(t.toJSON(),!0);for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&xt(t[e]))return!0;return!1}function Et(t){const e=[],s=t.data,n=t;return n.data=kt(s,e),n.attachments=e.length,{packet:n,buffers:e}}function kt(t,e){if(!t)return t;if(Ct(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let n=0;n<t.length;n++)s[n]=kt(t[n],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&(s[n]=kt(t[n],e));return s}return t}function It(t,e){return t.data=Tt(t.data,e),t.attachments=void 0,t}function Tt(t,e){if(!t)return t;if(t&&!0===t._placeholder){if("number"==typeof t.num&&t.num>=0&&t.num<e.length)return e[t.num];throw new Error("illegal attachments")}if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=Tt(t[s],e);else if("object"==typeof t)for(const s in t)Object.prototype.hasOwnProperty.call(t,s)&&(t[s]=Tt(t[s],e));return t}const St=5;var Rt;!function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(Rt||(Rt={}));class Ot{constructor(t){this.replacer=t}encode(t){return t.type!==Rt.EVENT&&t.type!==Rt.ACK||!xt(t)?[this.encodeAsString(t)]:(t.type=t.type===Rt.EVENT?Rt.BINARY_EVENT:Rt.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==Rt.BINARY_EVENT&&t.type!==Rt.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data,this.replacer)),e}encodeAsBinary(t){const e=Et(t),s=this.encodeAsString(e.packet),n=e.buffers;return n.unshift(s),n}}class At extends D{constructor(t){super(),this.reviver=t}add(t){let e;if("string"==typeof t){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");e=this.decodeString(t),e.type===Rt.BINARY_EVENT||e.type===Rt.BINARY_ACK?(this.reconstructor=new _t(e),0===e.attachments&&super.emitReserved("decoded",e)):super.emitReserved("decoded",e)}else{if(!Ct(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===Rt[s.type])throw new Error("unknown packet type "+s.type);if(s.type===Rt.BINARY_EVENT||s.type===Rt.BINARY_ACK){const n=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const i=t.substring(n,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(i)}if("/"===t.charAt(e+1)){const n=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);s.nsp=t.substring(n,e)}else s.nsp="/";const n=t.charAt(e+1);if(""!==n&&Number(n)==n){const n=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(n,e+1))}if(t.charAt(++e)){const n=this.tryParse(t.substr(e));if(!At.isPayloadValid(s.type,n))throw new Error("invalid payload");s.data=n}return s}tryParse(t){try{return JSON.parse(t,this.reviver)}catch(t){return!1}}static isPayloadValid(t,e){switch(t){case Rt.CONNECT:return"object"==typeof e;case Rt.DISCONNECT:return void 0===e;case Rt.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case Rt.EVENT:case Rt.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case Rt.ACK:case Rt.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}class _t{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=It(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function Nt(t,e,s){return t.on(e,s),function(){t.off(e,s)}}const Lt=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Bt extends D{constructor(t,e,s){super(),this.connected=!1,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,s&&s.auth&&(this.auth=s.auth),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const t=this.io;this.subs=[Nt(t,"open",this.onopen.bind(this)),Nt(t,"packet",this.onpacket.bind(this)),Nt(t,"error",this.onerror.bind(this)),Nt(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(Lt.hasOwnProperty(t))throw new Error('"'+t.toString()+'" is a reserved event name');e.unshift(t);const s={type:Rt.EVENT,data:e,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]){const t=this.ids++,n=e.pop();this._registerAckCallback(t,n),s.id=t}const n=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!n||!this.connected)||(this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s)),this.flags={},this}_registerAckCallback(t,e){const s=this.flags.timeout;if(void 0===s)return void(this.acks[t]=e);const n=this.io.setTimeoutFn((()=>{delete this.acks[t];for(let e=0;e<this.sendBuffer.length;e++)this.sendBuffer[e].id===t&&this.sendBuffer.splice(e,1);e.call(this,new Error("operation has timed out"))}),s);this.acks[t]=(...t)=>{this.io.clearTimeoutFn(n),e.apply(this,[null,...t])}}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){"function"==typeof this.auth?this.auth((t=>{this.packet({type:Rt.CONNECT,data:t})})):this.packet({type:Rt.CONNECT,data:this.auth})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t,e){this.connected=!1,delete this.id,this.emitReserved("disconnect",t,e)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case Rt.CONNECT:if(t.data&&t.data.sid){const e=t.data.sid;this.onconnect(e)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case Rt.EVENT:case Rt.BINARY_EVENT:this.onevent(t);break;case Rt.ACK:case Rt.BINARY_ACK:this.onack(t);break;case Rt.DISCONNECT:this.ondisconnect();break;case Rt.CONNECT_ERROR:this.destroy();const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let s=!1;return function(...n){s||(s=!0,e.packet({type:Rt.ACK,id:t,data:n}))}}onack(t){const e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}onconnect(t){this.id=t,this.connected=!0,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>{this.notifyOutgoingListeners(t),this.packet(t)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:Rt.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(t),this}prependAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(t),this}offAnyOutgoing(t){if(!this._anyOutgoingListeners)return this;if(t){const e=this._anyOutgoingListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(t){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const e=this._anyOutgoingListeners.slice();for(const s of e)s.apply(this,t.data)}}}function Mt(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}Mt.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},Mt.prototype.reset=function(){this.attempts=0},Mt.prototype.setMin=function(t){this.ms=t},Mt.prototype.setMax=function(t){this.max=t},Mt.prototype.setJitter=function(t){this.jitter=t};class zt extends D{constructor(t,e){var n;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,K(this,e),this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(n=e.randomizationFactor)&&void 0!==n?n:.5),this.backoff=new Mt({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const i=e.parser||s;this.encoder=new i.Encoder,this.decoder=new i.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(~this._readyState.indexOf("open"))return this;this.engine=new mt(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const n=Nt(e,"open",(function(){s.onopen(),t&&t()})),i=Nt(e,"error",(e=>{s.cleanup(),s._readyState="closed",this.emitReserved("error",e),t?t(e):s.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;0===t&&n();const s=this.setTimeoutFn((()=>{n(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}return this.subs.push(n),this.subs.push(i),this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(Nt(t,"ping",this.onping.bind(this)),Nt(t,"data",this.ondata.bind(this)),Nt(t,"error",this.onerror.bind(this)),Nt(t,"close",this.onclose.bind(this)),Nt(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){try{this.decoder.add(t)}catch(t){this.onclose("parse error",t)}}ondecoded(t){ct((()=>{this.emitReserved("packet",t)}),this.setTimeoutFn)}onerror(t){this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s||(s=new Bt(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return;this._close()}_packet(t){const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t,e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t,e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn((()=>{t.skipReconnect||(this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):t.onreconnect()})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((function(){clearTimeout(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const Pt={};function qt(t,e){"object"==typeof t&&(e=t,t=void 0);const s=function(t,e="",s){let n=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==s?s.protocol+"//"+t:"https://"+t),n=gt(t)),n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443")),n.path=n.path||"/";const i=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+i+":"+n.port+e,n.href=n.protocol+"://"+i+(s&&s.port===n.port?"":":"+n.port),n}(t,(e=e||{}).path||"/socket.io"),n=s.source,i=s.id,o=s.path,r=Pt[i]&&o in Pt[i].nsps;let h;return e.forceNew||e["force new connection"]||!1===e.multiplex||r?h=new zt(n,e):(Pt[i]||(Pt[i]=new zt(n,e)),h=Pt[i]),s.query&&!e.query&&(e.query=s.queryKey),h.socket(s.path,e)}Object.assign(qt,{Manager:zt,Socket:Bt,io:qt,connect:qt});class jt{constructor(t,e){this.tag="EVENTHANDLER",this.deleted=[],this.components=new Map,this.events=[],this.sceneManager=t,this.socket=qt(),e.socketEventMap&&e.socketEventMap(this.socket),window.addEventListener("click",(t=>{this.events.push("click")})),window.addEventListener("keydown",(t=>{this.events.push(t.key),console.log(t.key)}))}register(t){if(null==t.componentId||null==t.componentId){let e=o.getUniqueComponentId();t.componentId=e,t.system=this,this.components.set(e,t)}else t.system=this,this.components.set(t.componentId,t);console.log("Socket Manager registered")}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){console.log("Client Socket Handler"),console.log("Client Socket Handler Components:"+this.components.size),this.components.size;let e=[...this.components.keys()];for(var s of e){var n=this.components.get(s),i=n.eventMap;for(var o of this.events)if(i){var r=i.get(o);r&&r()}n.update(t)}for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(null==t?void 0:t.componentId)}this.events=[]}}class Dt{update(t,e){}constructor(t){this.engineTag="GRAPHICS",this.visible=!0,this.alive=!0,this.rendered=!1,this.transform=new m(this.entity,{x:0,y:0,z:0}),this.text=t}copy(t){this.componentId=t.componentId,this.entity=t.entity,this.text=t.text}render(){this.context&&this.context.ctx.fillText(this.text,20,20)}initialize(){}toJson(){return{entity:this.entity,engineTag:this.engineTag,componentId:this.componentId,text:this.text,visible:this.visible,alive:this.alive}}}class Ht{constructor(){this.text=new Dt("test"),this.components=[this.text],this.className="Label"}}window.onload=()=>{let e=new f({engineType:t.SOCKETCLIENT,graphicsConfig:new g("test","193as",{"background-color":"white",width:"100%",height:"100%"}),sceneConfig:[{scene:new class{constructor(t){this.name="test",this.time=0,this.entities=new Map,this.engineComponents=new Map;for(let e=0;e<t.length;e++)this.entities.set(e,t[e])}}([]),entities:[]}],scriptingConfig:{},collisionConfig:{}}),s=new Map;s.set("Templar",(()=>new E)),s.set("MainCamera",(()=>(console.log("camera made"),new I))),s.set("Player",(()=>new x)),s.set("Label",(()=>new Ht)),e.systems.push(new jt(e.sceneManager,{entityFactoryMap:s,socketEventMap:t=>{t.on("clientInitialize",(t=>{console.log("clientInitialize activated");for(let n of t){let t=e.sceneManager.scenes.get(n.sceneId);if(!t)throw new Error("Scene not found");{let i=s.get(n.entityClass);if(i){let s=i();s.id=n.id,s.scene=e.sceneManager.scenes.get(n.sceneId);for(let t=0;t<s.components.length;t++)s.components[t].copy(n.components[t]);t.entities.set(s.id,s),console.log("Added "+s.className)}}}e.start(4e3)})),t.on("connect",(()=>{console.log("connected");var e=window.location.pathname.split("/");t.emit("joined",window.sessionStorage.getItem("PlayerName"),e[e.length-1]),console.log("emitting"),t.emit("clientInitialize")})),t.on("update",(t=>{for(let s of t){let t=e.sceneManager.scenes.get(s.sceneId);if(!t)throw new Error("Scene not found");for(let e=0;e<s.components.length;e++){let n=t.engineComponents.get(s.components[e].engineTag),i=null==n?void 0:n.get(s.components[e].componentId);i&&i.copy(s.components[e])}}}))}}))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,