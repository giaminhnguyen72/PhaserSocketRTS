(()=>{"use strict";class t{constructor(t={keyboard:!1,mouse:!1}){this.tag="EVENTHANDLER",this.components=[],this.events=[],this.eventConfig=t,window.addEventListener("click",(t=>{this.events.push("click")})),window.addEventListener("keydown",(t=>{console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key),console.log(t.key)}))}update(t){console.log("Event Handler");for(var e=this.components.length,s=0;s<e;s++){var n=this.components[s];console.log("Has Component");var o=n.eventMap;for(var i of this.events)if(o){var r=o.get(i);r&&(r(),console.log("Has Ran"))}n.update(t)}this.events=[]}}class e{constructor(t,e){this.tag="GRAPHICS",this.graphicsConfig=t,this.components=[],document.documentElement.style.height="100%",document.documentElement.style.width="100%",document.body.style.height="100%",document.body.style.width="100%",document.body.style.margin="0",this.entities=[],this.contextInfo=e}update(t){var e=this.contextInfo.ctx;for(var s of(console.log("Graphics"),console.log(this.contextInfo.canvas.width),console.log(this.contextInfo.canvas.height),console.log("Graphics engine running"),e.clearRect(0,0,e.canvas.width,e.canvas.height),this.components))console.log(s.componentId),s.update(t,e),console.log("Inside Graphics Component"),console.log(s.componentId)}setScene(t){t.engineComponents.get(this.tag)}}class s{constructor(){this.tag="PHYSICS",this.components=[]}update(t){for(var e of(console.log("Physics engine running"),this.components))e.update(t)}}class n{constructor(){this.tag="SCRIPTING",this.components=[]}update(t){for(var e of(console.log("Scripting engine running"),this.components))console.log("Component running"),e.callback(t)}}class o{constructor(t){this.graphicsConfig=t,this.graphicsConfig=t,document.documentElement.style.height="100%",document.documentElement.style.width="100%",document.body.style.height="100%",document.body.style.width="100%",document.body.style.margin="0",this.setup(),this.canvas=this.generateCanvas(),this.canvas.width=1e3,this.canvas.height=500,this.ctx=this.canvas.getContext("2d"),this.div=this.generateDiv(this.graphicsConfig.parent)}generateDiv(t){var e=document.createElement("div");return e.id=t,e.style.position="absolute",e.style.height="100%",e.style.width="100%",e.style.zIndex="1",e.style.backgroundImage="/images/test.jpg",e.appendChild(this.canvas),document.body.appendChild(e),console.log("test"),e}generateCanvas(){var t=document.createElement("CANVAS");return t.id=this.graphicsConfig.canvasID,console.log(this.parseStyle(this.graphicsConfig.style)),console.log("Before"),t.setAttribute("style",this.parseStyle(this.graphicsConfig.style)),t}getCtx(){return this.getCanvas().getContext("2d")}getCanvas(){var t=document.getElementById(this.graphicsConfig.canvasID);if(t instanceof HTMLCanvasElement)return t;throw Error("engineCanvas should be a reserved id for DOM Components")}parseStyle(t){var e=Object.entries(t).map((([t,e])=>t+":"+e+";"));return console.log(this.graphicsConfig.parent),e.join(" ")}setup(){var t=new Image;t.src="/images/test.jpg",t.style.position="absolute",t.style.zIndex="-1",t.style.width="100%",t.style.height="100%",document.body.appendChild(t)}}class i{constructor(t="engineDiv",e="engineCanvas",s={},n){this.parent=t,this.canvasID=e,this.style=s,this.background=n}}class r{constructor(t,e=[],s){this.name=t,this.entities=e,this.background=s}}class h{constructor(t){this.scene=t}addEntity(t){var e=c.getUniqueId();for(var s of(t.id=e,t.scene=this.scene,this.scene.entities.set(e,t),t.components)){var n=this.scene.engineComponents.get(s.engineTag);if(!n){for(var o of(console.log(s.engineTag),this.scene.engineComponents.keys()))console.log(o);throw Error("something wrong adding entities")}n.push(this.createComponent(s))}}removeEntity(t){var e=this.getEntity(t);if(e)for(var s of e.components){var n=this.scene.engineComponents.get(s.engineTag);if(n)for(var o=0;o<n.length;o++)n[o].entity==e&&n.splice(o,1)}return e}getEntity(t){return this.scene.entities.get(t)}createComponent(t){return t.componentId=c.getUniqueComponentId(),t}}class a{constructor(t,e,s){for(var n of(this.sceneManager=t,this.name=e.name,this.entities=new Map,this.engineComponents=new Map,this.entityManager=new h(this),s))this.engineComponents.set(n.tag,[]);for(var o of e.entities)this.addEntity(o);console.log(this.engineComponents),this.background=e.background,this.time=0}update(t){}addEntity(t){var e=c.getUniqueId();for(var s of(t.id=e,t.scene=this,this.entities.set(e,t),t.components)){var n=this.engineComponents.get(s.engineTag);n?n.push(this.createComponent(s)):console.log(s.engineTag+" tagged System is not found")}console.log("successfully added entity")}removeEntity(t){var e=this.getEntity(t);if(e)for(var s of e.components){var n=this.engineComponents.get(s.engineTag);if(n)for(var o=0;o<n.length;o++)n[o].entity==e&&n.splice(o,1)}return e}getEntity(t){return this.entities.get(t)}createComponent(t){return t.componentId=c.getUniqueComponentId(),t}}class c{constructor(t=[new r("Default")],e,s=t[0].name){this.sceneConfigs=t,this.scenes=new Map;for(var n=0;n<t.length;n++){var o=t[n];console.log("In Scene Manager"),console.log(e),this.scenes.set(o.name,new a(this,o,e))}this.sceneConfigs=t,this.currentIdx=s,this.systems=e}switchScenes(t){}getCurrentScene(){let t=this.scenes.get(this.currentIdx);if(t)return t;throw Error("Cant get current scene")}update(t){for(var e of this.scenes)e[1].update(t)}static getUniqueId(){return c.id++}static getUniqueComponentId(){return c.componentId++}}c.id=0,c.componentId=0;class g{constructor(){this.tag="COLLISION",this.components=[]}update(t){for(var e of(console.log("Collision System Running"),this.components))for(var s of this.components)e.checkCollision(s)&&e!=s&&e.collides(s)}}class l{constructor(i={isServer:!0},r){if(this.canvasID="engineCanvas",this.systems=[],this.time=0,this.engineConfig=i,i.graphicsConfig&&(this.contextInfo=new o(i.graphicsConfig)),this.engineConfig.eventConfig&&this.systems.push(new t(this.engineConfig.eventConfig)),this.engineConfig.physicsConfig&&this.systems.push(new s),this.engineConfig.scriptingConfig&&this.contextInfo&&this.systems.push(new n),r)for(var h of r)this.systems.push(h);for(var h of(this.engineConfig.collisionConfig&&this.systems.push(new g),this.engineConfig.graphicsConfig&&this.contextInfo&&(console.log("Console.context info"),console.log(this.contextInfo),this.graphics=new e(this.engineConfig.graphicsConfig,this.contextInfo),this.systems.push(this.graphics)),this.sceneManager=new c(this.engineConfig.sceneConfig,this.systems),this.running=!0,this.systems)){var a=this.sceneManager.getCurrentScene().engineComponents.get(h.tag);if(!a)throw Error("error in start method");h.components=a}this.running=!1}start(t){if(this.running=!0,this.graphics)window.requestAnimationFrame((t=>{let e=t-this.time;this.update(e),this.time=t}));else for(;this.running;)this.update(t)}update(t){for(var e of(console.log(this),this.systems))e.update(t);this.sceneManager.update(t),this.time+=t,console.log(this.time),window.requestAnimationFrame((t=>{let e=t-this.time;this.update(e),this.time=t}))}}class p{constructor(t,e={x:0,y:0,z:0},s={x:0,y:0,z:0},n={x:0,y:0,z:0}){this.engineTag="PHYSICS",this.entity=t,this.pos=e,this.vel=s,this.accel=n}update(t){console.log("Position is: "+this.pos.x+" and "+this.pos.y),this.vel.x=this.vel.x+this.accel.x*t,this.vel.y=this.vel.y+this.accel.y*t,this.vel.z=this.vel.z+this.accel.z*t,this.pos.x=this.pos.x+this.vel.x*t,this.pos.y=this.pos.y+this.vel.y*t,this.pos.z=this.pos.z+this.vel.z*t}}class m{update(t,e){if(e){var s=255*Math.random(),n=255*Math.random(),o=255*Math.random();e.fillStyle=`rgb(\n                ${s},\n                ${n},\n                ${o})`,e.fillRect(this.transform.pos.x,this.transform.pos.y,20,20)}}constructor(t,e){this.engineTag="GRAPHICS",this.entity=t,this.transform=e}render(t){if(t){var e=255*Math.random(),s=255*Math.random(),n=255*Math.random();t.fillStyle=`rgb(\n                ${e},\n                ${s},\n                ${n})`,t.fillRect(this.transform.pos.x,this.transform.pos.y,20,20)}}}class d{constructor(t,e){this.engineTag="EVENTHANDLER",this.entity=t,this.eventMap=new Map,Object.entries(e).map((([t,e])=>{this.eventMap.set(t,e)}))}update(t,e){console.log("In mouse Listener")}}class f{constructor(t){this.engineTag="SCRIPTING",this.callback=t}update(t,e){this.callback(t)}}class u{constructor(t,e,s){this.engineTag="COLLISION",this.entity=t,this.collideType="Box",this.shape={pos:e,dim:{length:20,height:20},rot:0},this.prev={x:e.x,y:e.y,z:e.z},this.onCollision=s}checkCollision(t){if(console.log("Checking Collision"),t instanceof u){let e=t.shape,s=this.shape;if(0==e.rot&&0==s.rot)return e.pos.x+e.dim.length>s.pos.x&&e.pos.x<s.pos.x+s.dim.length&&e.pos.y+e.dim.height>s.pos.y&&e.pos.y<s.pos.y+s.dim.height;console.log("slanted box")}else console.log("not box");return!1}collides(t){console.log("Collided"),this.onCollision(t)}update(t,e){console.log("Updating Box Collider"),this.prev.x=this.shape.pos.x,this.prev.y=this.shape.pos.y,this.prev.z=this.shape.pos.z}}class y{constructor(t,e){this.transform=new p(this,t,e);var s=new f((t=>{this.transform.pos.x,console.log("In Player Script"),this.transform.pos.x<0?(this.transform.pos.x=0,this.transform.vel.x*=-1):this.transform.pos.x+20>1e3&&(this.transform.pos.x=980,this.transform.vel.x*=-1),this.transform.pos.y<0?(this.transform.pos.y=0,this.transform.vel.y*=-1):this.transform.pos.y+20>500&&(this.transform.pos.y=480,this.transform.vel.y*=-1)}));this.renderer=new m(this,this.transform),this.listener=new d(this,{click:()=>{var t;this.transform.pos.x=1e3*Math.random(),this.transform.pos.y=500*Math.random(),this.transform.vel.y=1,this.transform.vel.x=1;var e=1e3*Math.random(),s=500*Math.random();null===(t=this.scene)||void 0===t||t.addEntity(new y({x:e,y:s,z:15},{x:1,y:1,z:0}))},test2:()=>{console.log("test2")}});var n=new u(this,this.transform.pos,(t=>{this.transform.vel.x*=-1,this.transform.vel.y*=-1}));this.components=[this.transform,this.renderer,this.listener,s,n]}}window.onload=()=>{new l({isServer:!1,physicsConfig:{},graphicsConfig:new i("test","193as",{"background-color":"white",width:"100%",height:"100%"}),sceneConfig:[{name:"as",entities:[new y({x:0,y:0,z:15},{x:.001,y:0,z:0})]}],eventConfig:{keyboard:!0,mouse:!0},scriptingConfig:{},collisionConfig:{}}).start(1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,