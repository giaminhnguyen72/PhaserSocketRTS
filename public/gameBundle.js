(()=>{"use strict";var t={d:(e,s)=>{for(var i in s)t.o(s,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:s[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Decoder:()=>Qt,Encoder:()=>Ft,PacketType:()=>Kt,protocol:()=>Ut});class s{constructor(t={keyboard:!1,mouse:!1}){this.tag="EVENTHANDLER",this.deleted=[],this.components=new Map,this.events=[],this.eventConfig=t,window.addEventListener("click",(t=>{this.events.push("click")})),window.addEventListener("keydown",(t=>{this.events.push(t.key)}))}registerListener(){}registerEmitter(){}getConfig(){return this.eventConfig}register(t,e){null!=t.componentId&&null!=t.componentId||(t.componentId=e,t.system=this,this.components.set(e,t)),console.log("Event Handler registered")}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){console.log("Event Handler"),console.log("Event  Handler Components:"+this.components.size),this.components.size;let e=[...this.components.keys()];for(let s of e)this.components.get(s).update(t);for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(t?.componentId)}this.events=[]}}const i="GRAPHICS";class n{constructor(t){this.getQuad=new Map,this.parentNode=new o(t)}query(t){return this.parentNode.query(t)}clear(){this.parentNode.clear()}insert(t){let e=this.parentNode.insert(t);return this.getQuad.set(t,e),e}remove(t){let e=this.getQuad.get(t);if(!e)throw new Error;e.remove(t),this.getQuad.delete(t)}toString(){return this.parentNode.toString()}}class o{constructor(t,e=0){this.children=[],this.items=[],this.depth=0,this.maxDepth=3,this.area=t,this.depth=e,this.resize(t)}query(t){let e=[];return this.queryHelper(t,e),e}queryHelper(t,e){for(let s=0;s<this.items.length;s++)h(t,this.items[s].getRectangle())&&e.push(this.items[s]);for(let s=0;s<this.children.length;s++)r(t,this.children[s].area)?this.children[s].getItemList(e):h(this.children[s].area,t)&&this.children[s].queryHelper(t,e)}getItemList(t){for(let e of this.items)t.push(e);for(let e=0;e<this.children.length;e++)this.children[e].getItemList(t)}remove(t){for(let e=this.items.length-1;e>=0;e--)if(this.items[e]==t)return this.items[e]=this.items[this.items.length-1],this.items.pop(),!0;for(let e of this.children)if(e.remove(t))return!0;return!1}getRectangle(){return this.area}resize(t){this.clear(),this.area=t,this.depth+1<this.maxDepth&&(this.children.push(new o({pos:{x:t.pos.x-t.dim.length/4,y:t.pos.y+t.dim.height/4},dim:{length:t.dim.length/2,height:t.dim.height/2}},this.depth+1)),this.children.push(new o({pos:{x:t.pos.x-t.dim.length/4,y:t.pos.y-t.dim.height/4},dim:{length:t.dim.length/2,height:t.dim.height/2}},this.depth+1)),this.children.push(new o({pos:{x:t.pos.x+t.dim.length/4,y:t.pos.y+t.dim.height/4},dim:{length:t.dim.length/2,height:t.dim.height/2}},this.depth+1)),this.children.push(new o({pos:{x:t.pos.x+t.dim.length/4,y:t.pos.y-t.dim.height/4},dim:{length:t.dim.length/2,height:t.dim.height/2}},this.depth+1)))}clear(){this.items.length=0;for(let t=this.children.length-1;t>=0;t--)this.children[t].clear(),this.children.pop()}size(){let t=this.items.length;for(let e=0;e<4;e++)t+=this.children[e].size();return t}insert(t){for(let e=0;e<this.children.length;e++)if(r(this.children[e].area,t.getRectangle())&&this.depth+1<this.maxDepth)return this.children[e].insert(t);return this.items.push(t),this}toString(){let t="";for(let e=0;e<this.depth;e++)t+="     ";let e=""+t;e+=`Quad Position is ${this.area.pos.x},${this.area.pos.y} with area ${this.area.dim.height} x ${this.area.dim.height} \n`,e+=t,e+="Quad has "+this.children.length+" children at depth "+this.depth+"\n",e+=t,e+="Quad has "+this.items.length+" items\n",e+=t;for(let t of this.items)e+=JSON.stringify(t),e+="\n";for(let s of this.children)e+=t+"\n",e+=s;return e}}function r(t,e){let s=e.pos.x-e.dim.length/2,i=e.pos.y-e.dim.height/2,n=t.pos.x-t.dim.length/2,o=t.pos.y-t.dim.height/2;return s>=n&&s+e.dim.length<n+t.dim.length&&i>=o&&i+e.dim.height<o+t.dim.height}function h(t,e){let s=t.pos.x-t.dim.length/2,i=t.pos.y-t.dim.height/2,n=e.pos.x-e.dim.length/2,o=e.pos.y-e.dim.height/2;return s<n+e.dim.length&&s+t.dim.length>n&&i<o+e.dim.height&&i+t.dim.height>o}class a{constructor(t,e){this.registedElements=[],this.quadtree=new n(e)}registerStrategy(t){this.quadtree.insert(t)}deregisterStrategy(t){this.quadtree.remove(t)}render(t){for(let e of t){let t=e.getRectangle(),s=this.quadtree.query(t);e.render(s)}}clear(){}}class c{constructor(t,e){this.tag=i,this.rendering=[],this.graphicsConfig=t,this.components=new Map,this.deleted=[],document.documentElement.style.height="100%",document.documentElement.style.width="100%",document.body.style.height="100%",document.body.style.width="100%",document.body.style.margin="0",this.contextInfo=e;let s={pos:{x:0,y:0,z:0},rot:0,dim:{length:this.contextInfo.getCanvas().width,height:this.contextInfo.getCanvas().height}};this.renderStrategy=new a(this,s)}register(t,e){null==t.componentId||null==t.componentId?(console.log("Registering undefined id in Ggraphics"),t.componentId=e,t.system=this,t.context=this.contextInfo,1==t.rendered&&(this.rendering.push(t),console.log("Pushing to rendering")),t.initialize(this),this.components.set(e,t)):(console.log("Graphics Registering id"+t.componentId),t.system=this,t.context=this.contextInfo,1==t.rendered?(this.rendering.push(t),console.log("Pushing to rendering")):0==t.rendered&&(this.renderStrategy.registerStrategy(t),console.log("Registered Strategy")),t.initialize(this),this.components.set(t.componentId,t))}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e),this.components.delete(t),this.renderStrategy.deregisterStrategy(e),console.log(e.entity+" s Component with id "+e.componentId+"is popped"))}update(t){this.contextInfo.ctx,console.log("Graphics engine running"),console.log("Graphics Components: "+this.components.size);for(let e of this.components)e[1].update(t);for(console.log("Rendering Components: "+this.rendering.length),this.renderStrategy.render(this.rendering);this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(t?.componentId)}}setScene(t){t.engineComponents.get(this.tag)}registerDomElements(){}}class l{constructor(t){this.tag="PHYSICS",this.deleted=[],this.components=new Map,this.config=t}register(t,e){null==t.componentId||null==t.componentId?(t.system=this,this.components.set(e,t)):(t.system=this,this.components.set(t.componentId,t))}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e),console.log(e.entity+" s Component with id "+e.componentId+"is popped"))}update(t){console.log("Physics engine running"),console.log("Physics Components: "+this.components.size);for(let e of this.components)e[1].update(t);for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(t?.componentId)}}}var p,d;(d=p||(p={}))[d.SOCKETCLIENT=0]="SOCKETCLIENT",d[d.SOCKETSERVER=1]="SOCKETSERVER",d[d.CLIENTONLY=2]="CLIENTONLY",d[d.BOTH=3]="BOTH";class u{constructor(t){this.tag="SCRIPTING",this.deleted=[],this.components=new Map,this.engineType=t}register(t,e){null==t.componentId||null==t.componentId?(t.componentId=e,t.system=this,this.components.set(e,t)):(t.componentId=t.componentId,t.system=this,this.components.set(t.componentId,t))}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}initialize(t){}update(t){console.log("Scripting engine running"),console.log("Scripting Components: "+this.components.size);for(let e of this.components)(e[1].engineType==this.engineType||(e[1].engineType=p.BOTH))&&e[1].update(t);for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(t?.componentId)}}}class g{constructor(t){this.graphicsConfig=t,this.graphicsConfig=t,document.documentElement.style.height="100%",document.documentElement.style.width="100%",document.body.style.height="100%",document.body.style.width="100%",document.body.style.margin="0",this.setup(),this.canvas=this.generateCanvas(),this.ctx=this.canvas.getContext("2d"),this.div=this.generateDiv(this.graphicsConfig.parent)}generateDiv(t){let e=document.createElement("div");return e.id=t,e.style.height="100%",e.style.width="100%",e.style.zIndex="0",e.style.display="flex",e.style.justifyContent="center",e.appendChild(this.canvas),document.body.appendChild(e),console.log("test"),e}generateCanvas(){let t=document.createElement("CANVAS");return t.id=this.graphicsConfig.canvasID,console.log(this.parseStyle(this.graphicsConfig.style)),console.log("Before"),t.setAttribute("style",this.parseStyle(this.graphicsConfig.style)),t}getCtx(){return this.getCanvas().getContext("2d")}getCanvas(){let t=document.getElementById(this.graphicsConfig.canvasID);if(t instanceof HTMLCanvasElement)return t;throw Error("engineCanvas should be a reserved id for DOM Components")}parseStyle(t){let e=Object.entries(t).map((([t,e])=>t+":"+e+";"));return console.log(this.graphicsConfig.parent),e.join(" ")}setup(){if(this.graphicsConfig.background){let t=new Image;t.src=this.graphicsConfig.background,t.style.position="absolute",t.style.zIndex="-1",t.style.width="100%",t.style.height="100%",document.body.appendChild(t)}}}class m{constructor(t,e=[],s){this.scenes=new Map,this.id=0,this.componentId=0,this.systems=s,this.systemTag=new Map,this.engineConfig=t;let i=t.engineType;i==p.SOCKETCLIENT?m.EngineType=p.SOCKETCLIENT:i==p.SOCKETSERVER?m.EngineType=p.SOCKETSERVER:m.EngineType=p.CLIENTONLY;for(let t=0;t<e.length;t++){let s=e[t];s.sceneManager=this,s.engineComponents=new Map,console.log("In Scene Manager"),this.scenes.set(s.name,s)}this.setScene(e[0].name),this.sceneConfigs=e,m.currentIdx=this.sceneConfigs[0].name,this.systems=s}switchScenes(t){let e=this.scenes.get(t);if(e)for(var s of this.systems)if(!e.engineComponents.get(s.tag))throw Error("error in start method")}getCurrentScene(){let t=this.scenes.get(m.currentIdx);if(t)return t;throw Error("Cant get current scene")}setScene(t){let e=this.scenes.get(t);e&&(m.currScene=e,m.currentIdx=t)}getUniqueId(){if(m.EngineType==p.SOCKETCLIENT){let t=this.id-1;return this.id--,t}{let t=this.id+1;return this.id++,t}}getUniqueComponentId(){if(m.EngineType==p.SOCKETCLIENT){let t=this.componentId-1;return this.componentId--,t}{let t=this.componentId+1;return this.componentId++,t}}}m.EngineType=p.CLIENTONLY;class f{constructor(t){this.deleted=[],this.system=t}registerComponent(t){}update(t){for(var[e,s]of this.system.components)if(s.visible)for(var[i,n]of this.system.components)n.visible&&s.checkCollision(n)&&s!=n?s.collides(n):n.alive||this.deleted.push(n)}}class y{constructor(t){this.tag="COLLISION",this.components=new Map,this.config=t,this.deleted=[],t.bounds&&(this.bounds=t.bounds),this.collisionStrategy=new f(this)}register(t,e){null==t.componentId||null==t.componentId?(t.componentId=e,t.system=this,this.components.set(e,t)):(t.system=this,this.components.set(t.componentId,t)),this.collisionStrategy.registerComponent(t)}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){for(console.log("Collision System Running"),console.log("Collision Components: "+this.components.size),this.collisionStrategy.update(t);this.deleted.length>0;){let t=this.deleted.pop();t&&this.deleteComponent(t)}}deleteComponent(t){t.componentId&&this.components.delete(t.componentId)}}class v{constructor(t={engineType:p.CLIENTONLY},e){if(this.canvasID="engineCanvas",this.systems=[],this.serverTime=0n,this.clientTime=0,this.engineConfig=t,t.graphicsConfig&&(this.contextInfo=new g(t.graphicsConfig)),this.engineConfig.eventConfig&&this.contextInfo&&this.systems.push(new s(this.engineConfig.eventConfig)),this.engineConfig.physicsConfig&&this.systems.push(new l(this.engineConfig.physicsConfig)),this.engineConfig.scriptingConfig&&this.systems.push(new u(this.engineConfig.engineType)),e)for(let t of e)this.systems.push(t);if(this.engineConfig.collisionConfig&&this.systems.push(new y(this.engineConfig.collisionConfig)),this.engineConfig.graphicsConfig&&this.contextInfo&&(this.graphics=new c(this.engineConfig.graphicsConfig,this.contextInfo),this.systems.push(this.graphics)),e)for(let t of e)this.systems.push(t);this.sceneManager=new m(this.engineConfig,this.engineConfig.sceneConfig,this.systems),this.running=!0,this.running=!1}start(t){this.running=!0,console.log("Startng Engin ");let e=this.sceneManager.getCurrentScene();for(let t of this.systems){let s=this.sceneManager.getCurrentScene().engineComponents.set(t.tag,t.components);if(e.engineComponents.set(t.tag,t.components),this.sceneManager.systemTag.set(t.tag,t),!s)throw Error("error in start method")}let s=e.getSceneConfig(),i=s.entities.length;for(let t=0;t<i;t++)e.addEntity(e,s.entities[t]);this.engineConfig.engineType==p.CLIENTONLY||this.engineConfig.engineType==p.SOCKETCLIENT?window.requestAnimationFrame((t=>{this.update(0),v.time+=0,this.clientTime=t})):setTimeout((()=>{this.running&&(this.serverUpdate(0,t),this.serverTime=process.hrtime.bigint()),console.log("Timeout runout")}),t)}update(t){if(t>0){for(let e of this.systems)e.update(t);console.log(t),window.requestAnimationFrame((t=>{let e=t,s=e-this.clientTime;this.update(s),v.time+=s,this.clientTime=e}))}else window.requestAnimationFrame((t=>{let e=t,s=e-this.clientTime;this.update(s),v.time+=s,this.clientTime=e}))}serverUpdate(t,e){if(t>0){console.log("updating");for(let e of this.systems)e.update(t);setTimeout((()=>{if(this.running){let t=process.hrtime.bigint(),s=Number(t-this.serverTime)/1e6;this.serverUpdate(Number(s),e),v.time+=Number(s),this.serverTime=t,console.log(v.time)}}),e)}else setTimeout((()=>{if(this.running){let t=process.hrtime.bigint(),s=(t-this.serverTime)/1000000n;this.serverUpdate(Number(s),e),v.time+=Number(s),this.serverTime=t}}),e)}}v.updateTime=0,v.time=0;class w{constructor(t="engineDiv",e="engineCanvas",s={},i,n=1e3,o=500){this.width=n,this.height=o,this.parent=t,this.canvasID=e,this.style=s,this.background=i}}class b{constructor(t=[]){this.entities=t}}class C{constructor(t,e={x:0,y:0,z:0},s={x:0,y:0,z:0},i={x:0,y:0,z:0}){this.visible=!0,this.alive=!0,this.engineTag="PHYSICS",this.entity=t,this.pos=e,this.vel=s,this.accel=i}copy(t){this.pos.x=t.pos.x,this.pos.y=t.pos.y,this.pos.z=t.pos.z,this.vel.x=t.vel.x,this.vel.y=t.vel.y,this.vel.z=t.vel.z,this.accel.x=t.accel.x,this.accel.y=t.accel.y,this.accel.z=t.accel.z,this.entity=t.entity,this.componentId=t.componentId,this.visible=t.visible,this.alive=t.alive}update(t){console.log("Position is: "+this.pos.x+" and "+this.pos.y),this.vel.x=this.vel.x+this.accel.x*t,this.vel.y=this.vel.y+this.accel.y*t,this.vel.z=this.vel.z+this.accel.z*t,this.pos.x=this.pos.x+this.vel.x*t,this.pos.y=this.pos.y+this.vel.y*t,this.pos.z=this.pos.z+this.vel.z*t}toJSON(){return{pos:this.pos,vel:this.vel,accel:this.accel,entity:this.entity,componentId:this.componentId,visible:this.visible,alive:this.alive,engineTag:"PHYSICS"}}}function E(t){return t.pos.x-t.dim.length/2}function T(t){return t.pos.y-t.dim.height/2}class x{constructor(t,e,s){this.engineTag="GRAPHICS",this.rendered=!1,this.visible=!0,this.alive=!0,this.entity=t,this.src=s,this.shape=e,this.transform=this.shape.pos}unmount(){}copy(t){if(this.componentId=t.componentId,this.entity=t.entity,this.shape.dim.height=t.shape.dim.height,this.shape.dim.length=t.shape.dim.length,t.shape.pos.x!=t.transform.x)throw new Error;if(t.shape.pos.y!=t.transform.y)throw new Error;if(t.shape.pos.z!=t.transform.z)throw new Error;this.shape.pos.x=t.shape.pos.x,this.shape.pos.y=t.shape.pos.y,this.shape.pos.z=t.shape.pos.z,this.shape.rot=t.shape.rot,this.visible=t.visible,this.transform.x=t.transform.x,this.transform.y=t.transform.y,this.transform.z=t.transform.z}visit(t){}getRectangle(){return this.shape}render(){if(this.context.ctx){let t=E(this.shape),e=T(this.shape);this.context.ctx.drawImage(this.image,t,e,this.shape.dim.length,this.shape.dim.height)}}update(t){}initialize(){this.image=new Image,this.image.src=this.src}setSrc(t){console.log("Source changed"),this.src=t,this.image.src=t}toJSON(){return{entity:this.entity,componentId:this.componentId,engineTag:this.engineTag,transform:this.transform,visible:this.visible,alive:this.alive,src:this.src,shape:this.shape,renderred:this.rendered}}}class k{constructor(t){this.engineTag="EVENTHANDLER",this.visible=!0,this.alive=!0,this.events=new Map,Object.entries(t).map((([t,e])=>{this.events.set(t,e)}))}execute(t){let e=this.events.get(t.eventName);e&&e(t)}getEventType(){return"MOUSE"}copy(t){this.entity=t.entity,this.componentId=t.componentId,this.visible=t.visible,this.alive=t.alive}initialize(t){t.registerListener(this)}update(t,e){console.log("In mouse Listener")}toJSON(){return{entity:this.entity,engineTag:"EVENTHANDLER",componentId:this.componentId,visible:this.visible,alive:this.alive}}getEvents(){return this.events}}class I{constructor(t,e=p.CLIENTONLY){this.engineTag="SCRIPTING",this.visible=!0,this.alive=!0,this.callback=t,this.engineType=e}copy(t){}initialize(){}update(t,e){this.callback(t)}toJSON(){return{entity:this.entity,engineTag:this.engineTag,componenId:this.componentId,callback:this.callback}}}class S{constructor(t={x:20,y:20,z:0},e={x:.1,y:0,z:0},s=p.SOCKETSERVER){this.className="Player";let i={dim:{length:64,height:64},rot:0,pos:t},n=new x(-1,i,"/images/Knight_Forward.png");s==p.SOCKETCLIENT&&(n.rendered=!0,n.src="/images/Templar.png");let o=new C(-1,t,e),r=new I((t=>{console.log("Script runing"),o.pos.x<0&&(o.pos.x=0,o.vel.x*=-1,s==p.SOCKETCLIENT?(console.log(n.src),console.log("Client Hit 0: "+v.time)):(console.log(n.src),console.log("Server Hit 0: "+v.time))),o.pos.x+i.dim.length>500&&(s==p.SOCKETCLIENT?console.log("Client Hit 500: "+v.time):console.log("Server Hit 500: "+v.time),o.pos.x=430,o.vel.x*=-1),o.pos.y<0&&(o.pos.y=0,o.vel.y*=-1),o.pos.y+i.dim.height>300&&(o.pos.y=300,o.vel.y*=-1)}),p.BOTH),h=new k({click:t=>{console.log("Click")}});this.components=[o,n,r,h]}}class O{constructor(t,...e){this.components=[],this.scene=this,this.className="STAGE",this.time=0,this.entities=new Map,this.engineComponents=new Map,this.id=0,this.componentId=0,this.name=t,this.components=e}getSceneConfig(){return{entities:[this]}}addEntity(t,e){let s=this.sceneManager.getUniqueId();e.id=s,e.scene=this,this.entities.set(s,e);for(let t of e.components){let s=this.engineComponents.get(t.engineTag);if(t.entity=e.id,s){let e=this.sceneManager.systemTag.get(t.engineTag);e&&e.register(t,this.getUniqueComponentId())}else console.log(t.engineTag+"does not exist"),t.componentId=this.sceneManager.getUniqueComponentId()}return console.log("successfully added entity"),e}removeEntity(t){let e=this.entities.get(t);if(e){this.entities.delete(t);for(let t of e.components)console.log("Component"),console.log(t),console.log("System"),console.log(t.system),console.log("Component id "),console.log(t.componentId),t.system.unregister(t.componentId)}return e}addServerEntity(t,e){if(null==e.id||null==e.id)throw new Error("Entity id is undefined");if(e.scene=t,t.entities.set(e.id,e),t.newEntityQueue){if(!t.newEntityQueue.has(e.id)){for(let s of e.components)if(t.engineComponents.get(s.engineTag)){let e=t.sceneManager.systemTag.get(s.engineTag);e&&e.register(s,this.getUniqueComponentId())}else console.log(s.engineTag+" tagged System is not found");console.log("successfully added entitys")}return e}for(let s of e.components)if(t.engineComponents.get(s.engineTag)){let e=t.sceneManager.systemTag.get(s.engineTag);e&&e.register(s,this.getUniqueComponentId())}else console.log(s.engineTag+" tagged System is not found");return console.log("successfully added entitys"),e}getUniqueId(){if(m.EngineType==p.SOCKETCLIENT){let t=this.id-1;return this.id--,t}{let t=this.id+1;return this.id++,t}}getUniqueComponentId(){if(m.EngineType==p.SOCKETCLIENT){let t=this.componentId-1;return this.componentId--,t}{let t=this.componentId+1;return this.componentId++,t}}}class N{constructor(t){this.className="Templar",this.transform=new C(-1,{x:20*Math.random(),y:30*Math.random(),z:20},{x:10,y:10,z:0}),this.sprite=new x(-1,{pos:this.transform.pos,dim:{length:64,height:64},rot:0},"/images/Templar.png"),this.components=[this.sprite],t&&(this.transform.pos.x=t.x,this.transform.pos.y=t.y)}}class _{constructor(t=-1,e=-1,s=-1,i={x:0,y:0,z:-1},n={x:1,y:1}){this.visible=!0,this.alive=!0,this.engineTag="GRAPHICS",this.rendered=!0,this.height=s,this.width=e,this.pos=i,this.transform={x:0,y:0,z:0},this.entity=t,this.scale=n}unmount(){}getRectangle(){return{pos:this.pos,dim:{height:this.height,length:this.width},rot:0}}copy(t){this.entity=t.entity,this.componentId=t.componentId,this.width=t.width,this.height=t.height,this.visible=t.visible,this.alive=t.alive,this.scale.x=t.scale.x,this.scale.y=t.scale.y,this.rendered=t.rendered}initialize(){this.height<0&&(this.height=-1*this.height*this.context.canvas.height),this.width<0&&(this.width=-1*this.width*this.context.canvas.width),this.rendered&&(this.context.canvas.height=this.height,this.context.canvas.width=this.width)}update(t){this.context.ctx,this.pos.x+=this.transform.x,this.pos.y+=this.transform.y}render(t){this.context.ctx.translate(this.transform.x,this.transform.y),this.context.ctx.clearRect(-1*this.pos.x,-1*this.pos.y,this.width,this.height);let e=t;for(let s of e)s!=this&&s.render(t);console.log("Camera is rendered "+e.length+"elements"),this.transform.x=0,this.transform.y=0,this.context.ctx.save()}toJSON(){return{entity:this.entity,componentId:this.componentId,width:this.width,height:this.height,visible:this.visible,alive:this.alive,scale:this.scale,rendered:this.rendered,pos:this.pos}}}class R{constructor(t){this.visible=!0,this.alive=!0,this.engineTag="EVENTHANDLER",this.events=new Map,Object.entries(t).map((([t,e])=>{this.events.set(t,e)}))}getEvents(){return this.events}execute(t){let e=this.events.get(t.eventName);e&&e(t)}getEventType(){return"KEYBOARD"}initialize(t){t.registerListener(this)}copy(t){this.entity=t.entity,this.alive=t.alive,this.visible=t.visible,this.componentId=t.componentId}update(t,e){}toJSON(){return{entity:this.entity,alive:this.alive,visible:this.visible,componentId:this.componentId}}}class L{constructor(t){this.listeners=new Set,this.events=[],this.visible=!0,this.alive=!0,this.engineTag="EVENTHANDLER",this.engineType=t}initialize(t){t.registerEmitter(this),this.engineType!=p.SOCKETSERVER&&window.addEventListener("keydown",(t=>{this.events.push({eventName:"keydown",key:t.key})}))}addListener(t){this.listeners.add(t)}emit(t){for(let e of this.listeners)e.execute(t)}getEventType(){return"KEYBOARD"}update(t,e){for(let t=this.events.length-1;t>=0;t--)this.emit(this.events[t]),this.events.pop()}copy(t){this.alive=t.alive,this.visible=t.alive}toJSON(){return{visible:this.visible,alive:this.alive}}}class A{constructor(){this.camera=new _(-1,1e3,500),this.className="MainCamera",this.components=[this.camera,new R({keydown:t=>{"w"==t.key?(this.camera.transform.y-=1,console.log("W is pressed")):"a"==t.key?this.camera.transform.x-=1:"d"==t.key?this.camera.transform.x+=1:"s"==t.key&&(this.camera.transform.y+=1)}})]}}const B=Object.create(null);B.open="0",B.close="1",B.ping="2",B.pong="3",B.message="4",B.upgrade="5",B.noop="6";const M=Object.create(null);Object.keys(B).forEach((t=>{M[B[t]]=t}));const q={type:"error",data:"parser error"},z="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),P="function"==typeof ArrayBuffer,D=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer instanceof ArrayBuffer,j=({type:t,data:e},s,i)=>z&&e instanceof Blob?s?i(e):H(e,i):P&&(e instanceof ArrayBuffer||D(e))?s?i(e):H(new Blob([e]),i):i(B[t]+(e||"")),H=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+(t||""))},s.readAsDataURL(t)};function U(t){return t instanceof Uint8Array?t:t instanceof ArrayBuffer?new Uint8Array(t):new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}let K;function F(t,e){return z&&t.data instanceof Blob?t.data.arrayBuffer().then(U).then(e):P&&(t.data instanceof ArrayBuffer||D(t.data))?e(U(t.data)):void j(t,!1,(t=>{K||(K=new TextEncoder),e(K.encode(t))}))}const V="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let t=0;t<64;t++)V["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charCodeAt(t)]=t;const Q="function"==typeof ArrayBuffer,Y=(t,e)=>{if("string"!=typeof t)return{type:"message",data:W(t,e)};const s=t.charAt(0);return"b"===s?{type:"message",data:J(t.substring(1),e)}:M[s]?t.length>1?{type:M[s],data:t.substring(1)}:{type:M[s]}:q},J=(t,e)=>{if(Q){const s=(t=>{let e,s,i,n,o,r=.75*t.length,h=t.length,a=0;"="===t[t.length-1]&&(r--,"="===t[t.length-2]&&r--);const c=new ArrayBuffer(r),l=new Uint8Array(c);for(e=0;e<h;e+=4)s=V[t.charCodeAt(e)],i=V[t.charCodeAt(e+1)],n=V[t.charCodeAt(e+2)],o=V[t.charCodeAt(e+3)],l[a++]=s<<2|i>>4,l[a++]=(15&i)<<4|n>>2,l[a++]=(3&n)<<6|63&o;return c})(t);return W(s,e)}return{base64:!0,data:t}},W=(t,e)=>"blob"===e?t instanceof Blob?t:new Blob([t]):t instanceof ArrayBuffer?t:t.buffer,G=String.fromCharCode(30);let $;function X(t){if(t)return function(t){for(var e in X.prototype)t[e]=X.prototype[e];return t}(t)}X.prototype.on=X.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},X.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},X.prototype.off=X.prototype.removeListener=X.prototype.removeAllListeners=X.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var n=0;n<i.length;n++)if((s=i[n])===e||s.fn===e){i.splice(n,1);break}return 0===i.length&&delete this._callbacks["$"+t],this},X.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(s){i=0;for(var n=(s=s.slice(0)).length;i<n;++i)s[i].apply(this,e)}return this},X.prototype.emitReserved=X.prototype.emit,X.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},X.prototype.hasListeners=function(t){return!!this.listeners(t).length};const Z="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function tt(t,...e){return e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})}const et=Z.setTimeout,st=Z.clearTimeout;function it(t,e){e.useNativeTimers?(t.setTimeoutFn=et.bind(Z),t.clearTimeoutFn=st.bind(Z)):(t.setTimeoutFn=Z.setTimeout.bind(Z),t.clearTimeoutFn=Z.clearTimeout.bind(Z))}class nt extends Error{constructor(t,e,s){super(t),this.description=e,this.context=s,this.type="TransportError"}}class ot extends X{constructor(t){super(),this.writable=!1,it(this,t),this.opts=t,this.query=t.query,this.socket=t.socket}onError(t,e,s){return super.emitReserved("error",new nt(t,e,s)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(t){const e=Y(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){super.emitReserved("packet",t)}onClose(t){this.readyState="closed",super.emitReserved("close",t)}pause(t){}createUri(t,e={}){return t+"://"+this._hostname()+this._port()+this.opts.path+this._query(e)}_hostname(){const t=this.opts.hostname;return-1===t.indexOf(":")?t:"["+t+"]"}_port(){return this.opts.port&&(this.opts.secure&&Number(443!==this.opts.port)||!this.opts.secure&&80!==Number(this.opts.port))?":"+this.opts.port:""}_query(t){const e=function(t){let e="";for(let s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e}(t);return e.length?"?"+e:""}}const rt="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),ht=64,at={};let ct,lt=0,pt=0;function dt(t){let e="";do{e=rt[t%ht]+e,t=Math.floor(t/ht)}while(t>0);return e}function ut(){const t=dt(+new Date);return t!==ct?(lt=0,ct=t):t+"."+dt(lt++)}for(;pt<ht;pt++)at[rt[pt]]=pt;let gt=!1;try{gt="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){}const mt=gt;function ft(t){const e=t.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!e||mt))return new XMLHttpRequest}catch(t){}if(!e)try{return new(Z[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}function yt(){}const vt=null!=new ft({xdomain:!1}).responseType;class wt extends X{constructor(t,e){super(),it(this,e),this.opts=e,this.method=e.method||"GET",this.uri=t,this.data=void 0!==e.data?e.data:null,this.create()}create(){var t;const e=tt(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd;const s=this.xhr=new ft(e);try{s.open(this.method,this.uri,!0);try{if(this.opts.extraHeaders){s.setDisableHeaderCheck&&s.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&s.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{s.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{s.setRequestHeader("Accept","*/*")}catch(t){}null===(t=this.opts.cookieJar)||void 0===t||t.addCookies(s),"withCredentials"in s&&(s.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(s.timeout=this.opts.requestTimeout),s.onreadystatechange=()=>{var t;3===s.readyState&&(null===(t=this.opts.cookieJar)||void 0===t||t.parseCookies(s)),4===s.readyState&&(200===s.status||1223===s.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof s.status?s.status:0)}),0))},s.send(this.data)}catch(t){return void this.setTimeoutFn((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=wt.requestsCount++,wt.requests[this.index]=this)}onError(t){this.emitReserved("error",t,this.xhr),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=yt,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete wt.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&(this.emitReserved("data",t),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}function bt(){for(let t in wt.requests)wt.requests.hasOwnProperty(t)&&wt.requests[t].abort()}wt.requestsCount=0,wt.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",bt):"function"==typeof addEventListener&&addEventListener("onpagehide"in Z?"pagehide":"unload",bt,!1));const Ct="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):(t,e)=>e(t,0),Et=Z.WebSocket||Z.MozWebSocket,Tt="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();function xt(t,e){return"message"===t.type&&"string"!=typeof t.data&&e[0]>=48&&e[0]<=54}const kt={websocket:class extends ot{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=Tt?{}:tt(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=Tt?new Et(t,e,s):e?new Et(t,e):new Et(t)}catch(t){return this.emitReserved("error",t)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=t=>this.onClose({description:"websocket connection closed",context:t}),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],i=e===t.length-1;j(s,this.supportsBinary,(t=>{try{this.ws.send(t)}catch(t){}i&&Ct((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){const t=this.opts.secure?"wss":"ws",e=this.query||{};return this.opts.timestampRequests&&(e[this.opts.timestampParam]=ut()),this.supportsBinary||(e.b64=1),this.createUri(t,e)}check(){return!!Et}},webtransport:class extends ot{get name(){return"webtransport"}doOpen(){"function"==typeof WebTransport&&(this.transport=new WebTransport(this.createUri("https"),this.opts.transportOptions[this.name]),this.transport.closed.then((()=>{this.onClose()})).catch((t=>{this.onError("webtransport error",t)})),this.transport.ready.then((()=>{this.transport.createBidirectionalStream().then((t=>{const e=t.readable.getReader();let s;this.writer=t.writable.getWriter();const i=()=>{e.read().then((({done:t,value:e})=>{t||(s||1!==e.byteLength||54!==e[0]?(this.onPacket(function(t,e,s){$||($=new TextDecoder);const i=e||t[0]<48||t[0]>54;return Y(i?t:$.decode(t),"arraybuffer")}(e,s)),s=!1):s=!0,i())})).catch((t=>{}))};i();const n=this.query.sid?`0{"sid":"${this.query.sid}"}`:"0";this.writer.write((new TextEncoder).encode(n)).then((()=>this.onOpen()))}))})))}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],i=e===t.length-1;F(s,(t=>{xt(s,t)&&this.writer.write(Uint8Array.of(54)),this.writer.write(t).then((()=>{i&&Ct((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}))}}doClose(){var t;null===(t=this.transport)||void 0===t||t.close()}},polling:class extends ot{constructor(t){if(super(t),this.polling=!1,"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?"443":"80"),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port}const e=t&&t.forceBase64;this.supportsBinary=vt&&!e,this.opts.withCredentials&&(this.cookieJar=void 0)}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(t++,this.once("pollComplete",(function(){--t||e()}))),this.writable||(t++,this.once("drain",(function(){--t||e()})))}else e()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(t){((t,e)=>{const s=t.split(G),i=[];for(let t=0;t<s.length;t++){const n=Y(s[t],e);if(i.push(n),"error"===n.type)break}return i})(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const t=()=>{this.write([{type:"close"}])};"open"===this.readyState?t():this.once("open",t)}write(t){this.writable=!1,((t,e)=>{const s=t.length,i=new Array(s);let n=0;t.forEach(((t,o)=>{j(t,!1,(t=>{i[o]=t,++n===s&&e(i.join(G))}))}))})(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){const t=this.opts.secure?"https":"http",e=this.query||{};return!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=ut()),this.supportsBinary||e.sid||(e.b64=1),this.createUri(t,e)}request(t={}){return Object.assign(t,{xd:this.xd,cookieJar:this.cookieJar},this.opts),new wt(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",((t,e)=>{this.onError("xhr post error",t,e)}))}doPoll(){const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",((t,e)=>{this.onError("xhr poll error",t,e)})),this.pollXhr=t}}},It=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,St=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function Ot(t){const e=t,s=t.indexOf("["),i=t.indexOf("]");-1!=s&&-1!=i&&(t=t.substring(0,s)+t.substring(s,i).replace(/:/g,";")+t.substring(i,t.length));let n=It.exec(t||""),o={},r=14;for(;r--;)o[St[r]]=n[r]||"";return-1!=s&&-1!=i&&(o.source=e,o.host=o.host.substring(1,o.host.length-1).replace(/;/g,":"),o.authority=o.authority.replace("[","").replace("]","").replace(/;/g,":"),o.ipv6uri=!0),o.pathNames=function(t,e){const s=e.replace(/\/{2,9}/g,"/").split("/");return"/"!=e.slice(0,1)&&0!==e.length||s.splice(0,1),"/"==e.slice(-1)&&s.splice(s.length-1,1),s}(0,o.path),o.queryKey=function(t,e){const s={};return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,i){e&&(s[e]=i)})),s}(0,o.query),o}class Nt extends X{constructor(t,e={}){super(),this.writeBuffer=[],t&&"object"==typeof t&&(e=t,t=null),t?(t=Ot(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=Ot(e.host).host),it(this,e),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=e.transports||["polling","websocket","webtransport"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!1},e),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(t){let e={},s=t.split("&");for(let t=0,i=s.length;t<i;t++){let i=s[t].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){const e=Object.assign({},this.opts.query);e.EIO=4,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port},this.opts.transportOptions[t]);return new kt[t](s)}open(){let t;if(this.opts.rememberUpgrade&&Nt.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(t=>this.onClose("transport close",t)))}probe(t){let e=this.createTransport(t),s=!1;Nt.priorWebsocketSuccess=!1;const i=()=>{s||(e.send([{type:"ping",data:"probe"}]),e.once("packet",(t=>{if(!s)if("pong"===t.type&&"probe"===t.data){if(this.upgrading=!0,this.emitReserved("upgrading",e),!e)return;Nt.priorWebsocketSuccess="websocket"===e.name,this.transport.pause((()=>{s||"closed"!==this.readyState&&(c(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emitReserved("upgrade",e),e=null,this.upgrading=!1,this.flush())}))}else{const t=new Error("probe error");t.transport=e.name,this.emitReserved("upgradeError",t)}})))};function n(){s||(s=!0,c(),e.close(),e=null)}const o=t=>{const s=new Error("probe error: "+t);s.transport=e.name,n(),this.emitReserved("upgradeError",s)};function r(){o("transport closed")}function h(){o("socket closed")}function a(t){e&&t.name!==e.name&&n()}const c=()=>{e.removeListener("open",i),e.removeListener("error",o),e.removeListener("close",r),this.off("close",h),this.off("upgrading",a)};e.once("open",i),e.once("error",o),e.once("close",r),this.once("close",h),this.once("upgrading",a),-1!==this.upgrades.indexOf("webtransport")&&"webtransport"!==t?this.setTimeoutFn((()=>{s||e.open()}),200):e.open()}onOpen(){if(this.readyState="open",Nt.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data)}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.maxPayload=t.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const t=this.getWritablePackets();this.transport.send(t),this.prevBufferLen=t.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let t=1;for(let s=0;s<this.writeBuffer.length;s++){const i=this.writeBuffer[s].data;if(i&&(t+="string"==typeof(e=i)?function(t){let e=0,s=0;for(let i=0,n=t.length;i<n;i++)e=t.charCodeAt(i),e<128?s+=1:e<2048?s+=2:e<55296||e>=57344?s+=3:(i++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))),s>0&&t>this.maxPayload)return this.writeBuffer.slice(0,s);t+=2}var e;return this.writeBuffer}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,i){if("function"==typeof e&&(i=e,e=void 0),"function"==typeof s&&(i=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const n={type:t,data:e,options:s};this.emitReserved("packetCreate",n),this.writeBuffer.push(n),i&&this.once("flush",i),this.flush()}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},e=()=>{this.off("upgrade",e),this.off("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(t){Nt.priorWebsocketSuccess=!1,this.emitReserved("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const i=t.length;for(;s<i;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}}Nt.protocol=4,Nt.protocol;const _t="function"==typeof ArrayBuffer,Rt=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer,Lt=Object.prototype.toString,At="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Lt.call(Blob),Bt="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===Lt.call(File);function Mt(t){return _t&&(t instanceof ArrayBuffer||Rt(t))||At&&t instanceof Blob||Bt&&t instanceof File}function qt(t,e){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let e=0,s=t.length;e<s;e++)if(qt(t[e]))return!0;return!1}if(Mt(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return qt(t.toJSON(),!0);for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&qt(t[e]))return!0;return!1}function zt(t){const e=[],s=t.data,i=t;return i.data=Pt(s,e),i.attachments=e.length,{packet:i,buffers:e}}function Pt(t,e){if(!t)return t;if(Mt(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let i=0;i<t.length;i++)s[i]=Pt(t[i],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const i in t)Object.prototype.hasOwnProperty.call(t,i)&&(s[i]=Pt(t[i],e));return s}return t}function Dt(t,e){return t.data=jt(t.data,e),delete t.attachments,t}function jt(t,e){if(!t)return t;if(t&&!0===t._placeholder){if("number"==typeof t.num&&t.num>=0&&t.num<e.length)return e[t.num];throw new Error("illegal attachments")}if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=jt(t[s],e);else if("object"==typeof t)for(const s in t)Object.prototype.hasOwnProperty.call(t,s)&&(t[s]=jt(t[s],e));return t}const Ht=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"],Ut=5;var Kt;!function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(Kt||(Kt={}));class Ft{constructor(t){this.replacer=t}encode(t){return t.type!==Kt.EVENT&&t.type!==Kt.ACK||!qt(t)?[this.encodeAsString(t)]:this.encodeAsBinary({type:t.type===Kt.EVENT?Kt.BINARY_EVENT:Kt.BINARY_ACK,nsp:t.nsp,data:t.data,id:t.id})}encodeAsString(t){let e=""+t.type;return t.type!==Kt.BINARY_EVENT&&t.type!==Kt.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data,this.replacer)),e}encodeAsBinary(t){const e=zt(t),s=this.encodeAsString(e.packet),i=e.buffers;return i.unshift(s),i}}function Vt(t){return"[object Object]"===Object.prototype.toString.call(t)}class Qt extends X{constructor(t){super(),this.reviver=t}add(t){let e;if("string"==typeof t){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");e=this.decodeString(t);const s=e.type===Kt.BINARY_EVENT;s||e.type===Kt.BINARY_ACK?(e.type=s?Kt.EVENT:Kt.ACK,this.reconstructor=new Yt(e),0===e.attachments&&super.emitReserved("decoded",e)):super.emitReserved("decoded",e)}else{if(!Mt(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===Kt[s.type])throw new Error("unknown packet type "+s.type);if(s.type===Kt.BINARY_EVENT||s.type===Kt.BINARY_ACK){const i=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const n=t.substring(i,e);if(n!=Number(n)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(n)}if("/"===t.charAt(e+1)){const i=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);s.nsp=t.substring(i,e)}else s.nsp="/";const i=t.charAt(e+1);if(""!==i&&Number(i)==i){const i=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(i,e+1))}if(t.charAt(++e)){const i=this.tryParse(t.substr(e));if(!Qt.isPayloadValid(s.type,i))throw new Error("invalid payload");s.data=i}return s}tryParse(t){try{return JSON.parse(t,this.reviver)}catch(t){return!1}}static isPayloadValid(t,e){switch(t){case Kt.CONNECT:return Vt(e);case Kt.DISCONNECT:return void 0===e;case Kt.CONNECT_ERROR:return"string"==typeof e||Vt(e);case Kt.EVENT:case Kt.BINARY_EVENT:return Array.isArray(e)&&("number"==typeof e[0]||"string"==typeof e[0]&&-1===Ht.indexOf(e[0]));case Kt.ACK:case Kt.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class Yt{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=Dt(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function Jt(t,e,s){return t.on(e,s),function(){t.off(e,s)}}const Wt=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Gt extends X{constructor(t,e,s){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,s&&s.auth&&(this.auth=s.auth),this._opts=Object.assign({},s),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const t=this.io;this.subs=[Jt(t,"open",this.onopen.bind(this)),Jt(t,"packet",this.onpacket.bind(this)),Jt(t,"error",this.onerror.bind(this)),Jt(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(Wt.hasOwnProperty(t))throw new Error('"'+t.toString()+'" is a reserved event name');if(e.unshift(t),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(e),this;const s={type:Kt.EVENT,data:e,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]){const t=this.ids++,i=e.pop();this._registerAckCallback(t,i),s.id=t}const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!i||!this.connected)||(this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s)),this.flags={},this}_registerAckCallback(t,e){var s;const i=null!==(s=this.flags.timeout)&&void 0!==s?s:this._opts.ackTimeout;if(void 0===i)return void(this.acks[t]=e);const n=this.io.setTimeoutFn((()=>{delete this.acks[t];for(let e=0;e<this.sendBuffer.length;e++)this.sendBuffer[e].id===t&&this.sendBuffer.splice(e,1);e.call(this,new Error("operation has timed out"))}),i);this.acks[t]=(...t)=>{this.io.clearTimeoutFn(n),e.apply(this,[null,...t])}}emitWithAck(t,...e){const s=void 0!==this.flags.timeout||void 0!==this._opts.ackTimeout;return new Promise(((i,n)=>{e.push(((t,e)=>s?t?n(t):i(e):i(t))),this.emit(t,...e)}))}_addToQueue(t){let e;"function"==typeof t[t.length-1]&&(e=t.pop());const s={id:this._queueSeq++,tryCount:0,pending:!1,args:t,flags:Object.assign({fromQueue:!0},this.flags)};t.push(((t,...i)=>{if(s===this._queue[0])return null!==t?s.tryCount>this._opts.retries&&(this._queue.shift(),e&&e(t)):(this._queue.shift(),e&&e(null,...i)),s.pending=!1,this._drainQueue()})),this._queue.push(s),this._drainQueue()}_drainQueue(t=!1){if(!this.connected||0===this._queue.length)return;const e=this._queue[0];e.pending&&!t||(e.pending=!0,e.tryCount++,this.flags=e.flags,this.emit.apply(this,e.args))}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){"function"==typeof this.auth?this.auth((t=>{this._sendConnectPacket(t)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(t){this.packet({type:Kt.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},t):t})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t,e){this.connected=!1,delete this.id,this.emitReserved("disconnect",t,e)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case Kt.CONNECT:t.data&&t.data.sid?this.onconnect(t.data.sid,t.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case Kt.EVENT:case Kt.BINARY_EVENT:this.onevent(t);break;case Kt.ACK:case Kt.BINARY_ACK:this.onack(t);break;case Kt.DISCONNECT:this.ondisconnect();break;case Kt.CONNECT_ERROR:this.destroy();const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t),this._pid&&t.length&&"string"==typeof t[t.length-1]&&(this._lastOffset=t[t.length-1])}ack(t){const e=this;let s=!1;return function(...i){s||(s=!0,e.packet({type:Kt.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}onconnect(t,e){this.id=t,this.recovered=e&&this._pid===e,this._pid=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>{this.notifyOutgoingListeners(t),this.packet(t)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:Kt.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(t),this}prependAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(t),this}offAnyOutgoing(t){if(!this._anyOutgoingListeners)return this;if(t){const e=this._anyOutgoingListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(t){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const e=this._anyOutgoingListeners.slice();for(const s of e)s.apply(this,t.data)}}}function $t(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}$t.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},$t.prototype.reset=function(){this.attempts=0},$t.prototype.setMin=function(t){this.ms=t},$t.prototype.setMax=function(t){this.max=t},$t.prototype.setJitter=function(t){this.jitter=t};class Xt extends X{constructor(t,s){var i;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(s=t,t=void 0),(s=s||{}).path=s.path||"/socket.io",this.opts=s,it(this,s),this.reconnection(!1!==s.reconnection),this.reconnectionAttempts(s.reconnectionAttempts||1/0),this.reconnectionDelay(s.reconnectionDelay||1e3),this.reconnectionDelayMax(s.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(i=s.randomizationFactor)&&void 0!==i?i:.5),this.backoff=new $t({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==s.timeout?2e4:s.timeout),this._readyState="closed",this.uri=t;const n=s.parser||e;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this._autoConnect=!1!==s.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(~this._readyState.indexOf("open"))return this;this.engine=new Nt(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=Jt(e,"open",(function(){s.onopen(),t&&t()})),n=e=>{this.cleanup(),this._readyState="closed",this.emitReserved("error",e),t?t(e):this.maybeReconnectOnOpen()},o=Jt(e,"error",n);if(!1!==this._timeout){const t=this._timeout,s=this.setTimeoutFn((()=>{i(),n(new Error("timeout")),e.close()}),t);this.opts.autoUnref&&s.unref(),this.subs.push((()=>{this.clearTimeoutFn(s)}))}return this.subs.push(i),this.subs.push(o),this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(Jt(t,"ping",this.onping.bind(this)),Jt(t,"data",this.ondata.bind(this)),Jt(t,"error",this.onerror.bind(this)),Jt(t,"close",this.onclose.bind(this)),Jt(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){try{this.decoder.add(t)}catch(t){this.onclose("parse error",t)}}ondecoded(t){Ct((()=>{this.emitReserved("packet",t)}),this.setTimeoutFn)}onerror(t){this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s?this._autoConnect&&!s.active&&s.connect():(s=new Gt(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return;this._close()}_packet(t){const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t,e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t,e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn((()=>{t.skipReconnect||(this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):t.onreconnect()})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((()=>{this.clearTimeoutFn(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const Zt={};function te(t,e){"object"==typeof t&&(e=t,t=void 0);const s=function(t,e="",s){let i=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==s?s.protocol+"//"+t:"https://"+t),i=Ot(t)),i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443")),i.path=i.path||"/";const n=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+n+":"+i.port+e,i.href=i.protocol+"://"+n+(s&&s.port===i.port?"":":"+i.port),i}(t,(e=e||{}).path||"/socket.io"),i=s.source,n=s.id,o=s.path,r=Zt[n]&&o in Zt[n].nsps;let h;return e.forceNew||e["force new connection"]||!1===e.multiplex||r?h=new Xt(i,e):(Zt[n]||(Zt[n]=new Xt(i,e)),h=Zt[n]),s.query&&!e.query&&(e.query=s.queryKey),h.socket(s.path,e)}Object.assign(te,{Manager:Xt,Socket:Gt,io:te,connect:te});class ee{static getInstance(){return null!=ee.socket&&null!=ee.socket||(this.socket=te()),ee.socket}constructor(t,e){this.tag="EVENTHANDLER",this.emitters=new Map,this.unregistered=new Map,this.listeners=[],this.deleted=[],this.components=new Map,this.config=e,this.sceneManager=t,window.addEventListener("click",(t=>{ee.socket.emit("click")})),window.addEventListener("keydown",(t=>{ee.socket.emit("keydown",t.key)}))}getConfig(){return this.config}registerListener(t){let e=this.emitters.get(t.getEventType());e?e.addListener(t):this.listeners.push(t)}registerEmitter(t){this.emitters.set(t.getEventType(),t)}register(t){if(null==t.componentId||null==t.componentId){let e=this.sceneManager.getUniqueComponentId();t.componentId=e,t.system=this,t.initialize(this),this.components.set(e,t)}else t.system=this,this.components.set(t.componentId,t),t.initialize(this);console.log("Socket Manager registered")}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){console.log("Client Socket Handler"),console.log("Client Socket Handler Components:"+this.components.size);for(let e of this.emitters)e[1].update(t);for(let t=this.listeners.length-1;t>=0;t--){let e=this.emitters.get(this.listeners[t].getEventType());e&&(e.addListener(this.listeners[t]),this.listeners[t]=this.listeners[this.listeners.length-1],this.listeners.pop())}}}class se{update(t,e){}constructor(t){this.engineTag="GRAPHICS",this.visible=!0,this.alive=!0,this.rendered=!1,this.transform={x:100,y:100,z:0},this.text=t}unmount(){}copy(t){this.componentId=t.componentId,this.entity=t.entity,this.text=t.text,this.transform.x=this.transform.x,this.transform.y=this.transform.y}render(){this.context&&this.context.ctx.fillText(this.text,this.transform.x,this.transform.y)}initialize(){}getRectangle(){return{pos:this.transform,dim:{length:0,height:0},rot:0}}toJson(){return{entity:this.entity,engineTag:this.engineTag,componentId:this.componentId,text:this.text,visible:this.visible,alive:this.alive,transform:this.transform}}}class ie{constructor(){this.text=new se("test"),this.components=[this.text],this.className="Label"}}class ne{constructor(t,e,s,n){this.visible=!0,this.alive=!0,this.engineTag=i,this.state=0,this.time=0,this.rendered=!1,this.path=t,this.transform=e.pos,this.shape=e,this.delay=s}unmount(){throw new Error("Method not implemented.")}render(){if(this.context.ctx){let t=E(this.shape);console.log("Drawn with State "+this.state);let e=T(this.shape);this.context.ctx.drawImage(this.image,this.shape.dim.length*this.state,0,this.shape.dim.length,this.shape.dim.height,t,e,this.shape.dim.length,this.shape.dim.height)}else console.log("Context is not injected")}initialize(){this.image=new Image,this.image.src=this.path,this.state=0}update(t,e){if(this.time+=t,console.log("Updating Spritesheet"),this.time>this.delay){console.log("Time is greater than delay");let t=Math.floor(this.time/this.delay),e=Math.floor(this.image.width/this.shape.dim.length);console.log("Image width is "+this.image.width),console.log("State change is "+t),this.state=(1+this.state)%e,this.time=this.time%this.delay}}getRectangle(){return this.shape}copy(t){var e,s;this.entity=t.entity,this.visible=t.visible,this.alive=t.alive,this.componentId=t.componentId,this.path=t.path,this.delay=t.delay,this.rendered=t.rendered,this.transform.x=t.transform.x,this.transform.y=t.transform.y,this.transform.z=t.transform.z,e=this.shape,s=t.shape,e.dim.height=s.dim.height,e.dim.length=s.dim.length,e.pos.x=s.pos.x,e.pos.y=s.pos.y,e.pos.z=s.pos.z,e.rot=s.rot}toJSON(){return{entity:this.entity,componentId:this.componentId,engineTag:this.engineTag,transform:this.transform,visible:this.visible,alive:this.alive,src:this.path,shape:this.shape,delay:this.delay,state:this.state,time:this.time,path:this.path,rendered:this.rendered}}}class oe{constructor(){this.components=[new ne("/images/SwordSpriteSheet.png",{dim:{length:32,height:32},pos:{x:20,y:20,z:0},rot:0},3,32)],this.className="SWORDANIM"}}function re(t,e){if(null==e.id||null==e.id)throw new Error("Entity id is undefined");if(e.scene=t,t.entities.set(e.id,e),t.newEntityQueue){if(!t.newEntityQueue.has(e.id)){for(let s of e.components)if(t.engineComponents.get(s.engineTag)){let e=t.sceneManager.systemTag.get(s.engineTag);e&&e.register(s,t.getUniqueComponentId())}else console.log(s.engineTag+" tagged System is not found");console.log("successfully added entitys")}return e}for(let s of e.components)if(t.engineComponents.get(s.engineTag)){let e=t.sceneManager.systemTag.get(s.engineTag);e&&e.register(s,t.getUniqueComponentId())}else console.log(s.engineTag+" tagged System is not found");return console.log("successfully added entitys"),e}class he{constructor(t,e){this.emissionQueue=[],this.listenQueue=new Map,this.listenerLock=!1,this.visible=!0,this.alive=!0,this.engineTag="EVENTHANDLER",this.snapShots=[],this.time=0,this.socketMap=t,this.events=new Map,this.socketConfig=e}initialize(t){t.registerEmitter(this),t.registerListener(this),Object.entries(this.socketMap).map((([t,e])=>{this.events.set(t,e),ee.getInstance().on(t,(e=>{this.events.get(t)&&!this.listenerLock&&this.listenQueue.set(t,{event:t,data:e})}))})),this.events.set("update",(t=>{let e=m.currScene;if(console.log("Client Time Difference "+(t.time-v.time)),e)for(let s of t.data){let t=e;if(!t)throw new Error("Scene not found");if(t.entities.get(s.id))for(let e=0;e<s.components.length;e++){let i=t.engineComponents.get(s.components[e].engineTag),n=i?.get(s.components[e].componentId);n&&n.copy(s.components[e])}else{console.log("Adding new Entity");let e=this.socketConfig.entityGeneratorMap.get(s.entityClass);if(e){let i=e();i.id=s.id,i.scene=t;for(let t=0;t<i.components.length;t++)i.components[t].copy(s.components[t]);re(t,i)}}}})),ee.getInstance().on("update",(t=>{this.events.get("update"),console.log("On update "+(t.timestamp-v.time)),this.listenerLock||this.listenQueue.set("update",{event:"update",data:t})}))}addListener(t){let e=t.getEvents();for(let t of e)ee.getInstance().on(t[0],t[1])}emit(t){ee.getInstance().emit(t.event,t.data)}update(t,e){this.time+=t;for(let t=this.emissionQueue.length-1;t>=0;t--)this.emit(this.emissionQueue[t]),this.emissionQueue.pop();this.listenerLock=!0;for(let t of this.listenQueue){let e=this.events.get(t[0]);if(!e)throw new Error;e(t[1].data)}this.listenQueue.clear(),this.listenerLock=!1}queueEvent(t){this.emissionQueue.push(t)}copy(t){this.visible=t.visible,this.alive=t.alive,this.socketConfig.engineType=t.socketConfig.engineType}getEventType(){return"SocketServer"}execute(t){if(t){let e=this.events.get(t.event);e&&e(t.data)}}getEvents(){let t=new Map;return Object.entries(this.socketMap).map((([e,s])=>{t.set(e,s)})),t}toJSON(){let t=this.socketConfig.engineType==p.SOCKETCLIENT?p.SOCKETSERVER:p.SOCKETCLIENT;return{visible:this.visible,alive:this.alive,socketConfig:{engineType:t}}}}let ae=new Map;ae.set("Templar",(()=>new N)),ae.set("MainCamera",(()=>(console.log("camera made"),new A))),ae.set("Player",(()=>new S)),ae.set("Label",(()=>new ie)),ae.set("SWORDANIM",(()=>new oe));class ce extends O{constructor(t){super("Name"),this.time=0,this.entities=new Map,this.engineComponents=new Map,this.sceneConfig=new b(t);let e=new he({connect:()=>{console.log("connected");let t=window.location.pathname.split("/");ee.getInstance().emit("joined",window.sessionStorage.getItem("PlayerName"),t[t.length-1]),console.log("emitting"),e.emit({event:"clientInitialize",data:null})},disconnect:()=>{throw new Error}},{engineType:p.SOCKETCLIENT,entityGeneratorMap:ae});new k({click:t=>{console.log("Position x is "+t.pos.x),console.log("Position y is "+t.pos.y),console.log("Name is "+t.eventName),e.emit({event:"click",data:null})},dblclick:t=>{}}),this.components.push(e,new L(p.SOCKETCLIENT))}getSceneConfig(){let t=new S({x:20,y:20,z:20},{x:.1,y:0,z:0},p.SOCKETCLIENT);return this.sceneConfig.entities.push(this,t),this.sceneConfig}}window.onload=()=>{let t=new ce([new A]),e=new v({engineType:p.SOCKETCLIENT,graphicsConfig:new w("test","193as",{"display:flex;background-color":"white",width:"100%",height:"100%","z-index":"0"}),sceneConfig:[t],physicsConfig:{},scriptingConfig:{}});e.systems.push(new ee(e.sceneManager,{entityFactoryMap:ae,socketEventMap:t=>{t.on("connect",(()=>{console.log("connected");let e=window.location.pathname.split("/");t.emit("joined",window.sessionStorage.getItem("PlayerName"),e[e.length-1]),console.log("emitting"),t.emit("clientInitialize")}))}})),e.start(10)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,