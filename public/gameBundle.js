(()=>{"use strict";var t,e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},s={};function i(t,e){let s=r.getUniqueId();e.id=s,e.scene=t,t.entities.set(s,e);for(let s of e.components){let i=t.engineComponents.get(s.engineTag);if(s.entity=e.id,i){let e=t.sceneManager.systemTag.get(s.engineTag);e&&e.register(s)}else console.log(s.engineTag+"does not exist"),s.componentId=r.getUniqueComponentId()}return console.log("successfully added entity"),e}function n(t,e){let s=r.getUniqueId();e.id=s,e.scene=t,t.entities.set(s,e);for(let s of e.components){let i=t.engineComponents.get(s.engineTag);if(s.entity=e.id,i){let e=t.sceneManager.systemTag.get(s.engineTag);e&&e.register(s)}else console.log(s.engineTag+"does not exist"),s.componentId=r.getUniqueComponentId()}return console.log("successfully added entity"),e}function o(t,e){if(null==e.id||null==e.id)throw new Error("Entity id is undefined");if(e.scene=t,t.entities.set(e.id,e),t.newEntityQueue){if(!t.newEntityQueue.has(e.id)){for(let s of e.components)if(t.engineComponents.get(s.engineTag)){let e=t.sceneManager.systemTag.get(s.engineTag);e&&e.register(s)}else console.log(s.engineTag+" tagged System is not found");console.log("successfully added entitys")}return e}for(let s of e.components)if(t.engineComponents.get(s.engineTag)){let e=t.sceneManager.systemTag.get(s.engineTag);e&&e.register(s)}else console.log(s.engineTag+" tagged System is not found");return console.log("successfully added entitys"),e}e.r(s),e.d(s,{Decoder:()=>Ft,Encoder:()=>Kt,PacketType:()=>Ht,protocol:()=>Ut}),function(t){t[t.SOCKETCLIENT=0]="SOCKETCLIENT",t[t.SOCKETSERVER=1]="SOCKETSERVER",t[t.CLIENTONLY=2]="CLIENTONLY"}(t||(t={}));class r{constructor(e,s=[],o){this.systems=o,this.systemTag=new Map,r.sceneManager=this,this.engineConfig=e;let h=e.engineType;h==t.SOCKETCLIENT?(this.addEntity=i,r.EngineType=t.SOCKETCLIENT):h==t.SOCKETSERVER?(this.addEntity=n,r.EngineType=t.SOCKETSERVER):(this.addEntity=n,r.EngineType=t.CLIENTONLY);for(let t=0;t<s.length;t++){let e=s[t];e.sceneManager=this,e.engineComponents=new Map,e.addEntity=this.addEntity,console.log("In Scene Manager"),r.scenes.set(e.name,e)}this.sceneConfigs=s,r.currentIdx=this.sceneConfigs[0].name,this.systems=o}switchScenes(t){let e=r.scenes.get(t);if(e)for(var s of this.systems)if(!e.engineComponents.get(s.tag))throw Error("error in start method")}getCurrentScene(){let t=r.scenes.get(r.currentIdx);if(t)return t;throw Error("Cant get current scene")}static getInstance(){return r.sceneManager}static getUniqueId(){if(r.EngineType==t.SOCKETCLIENT){let t=r.id-1;return r.id--,t}{let t=r.id+1;return r.id++,t}}static getUniqueComponentId(){if(r.EngineType==t.SOCKETCLIENT){let t=r.componentId-1;return r.componentId--,t}{let t=r.componentId+1;return r.componentId++,t}}}r.scenes=new Map,r.id=0,r.componentId=0,r.EngineType=t.CLIENTONLY;class h{constructor(t={keyboard:!1,mouse:!1}){this.tag="EVENTHANDLER",this.deleted=[],this.components=new Map,this.events=[],this.eventConfig=t,window.addEventListener("click",(t=>{this.events.push("click")})),window.addEventListener("keydown",(t=>{this.events.push(t.key)}))}registerListener(){}registerEmitter(){}getConfig(){return this.eventConfig}register(t){if(null==t.componentId||null==t.componentId){let e=r.getUniqueComponentId();t.componentId=e,t.system=this,this.components.set(e,t)}console.log("Event Handler registered")}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){console.log("Event Handler"),console.log("Event  Handler Components:"+this.components.size),this.components.size;let e=[...this.components.keys()];for(let s of e)this.components.get(s).update(t);for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(null==t?void 0:t.componentId)}this.events=[]}}const a="GRAPHICS";class c{constructor(){this.items=[],this.size=0}clear(){this.items=[],this.size=0}swap(t,e){var s=this.items[t];this.items[t]=this.items[e],this.items[e]=s}enqueue(t,e){this.items.push({data:t,priority:e});let s=this.items.length-1;for(var i=Math.floor((s-1)/2);s>0&&this.items[s].priority>this.items[i].priority;)this.swap(s,i),s=i,i=Math.floor((s-1)/2);this.size++}dequeue(){if(0==this.size)return;if(1==this.size){this.size--;let t=this.items[0].data;return this.items.pop(),t}console.log(this.items);let t=this.items[0];this.size--,console.log("Unpopped "+this.size);let e=this.items.pop();if(console.log("Popped "+this.size),console.log(e),console.log(),e){this.items[0]=e;for(let t=0;t<this.items.length;t++);}console.log("Size is"+this.size);let s=0;for(;s<=this.size-1;){let t=2*s+1,e=2*s+2;if(t<=this.size-1&&e<=this.size-1){let i=this.items[t].priority>this.items[e].priority?t:e;if(!(this.items[i].priority>this.items[s].priority))break;this.swap(s,i),s=i}else{if(!(t<=this.size-1))break;if(!(this.items[t].priority>this.items[s].priority))break;this.swap(s,t),s=t}}return t.data}}class l{constructor(){this.queue=new c}render(t){let e=[],s=this.queue.size;for(let t=0;t<s;t++){let t=this.queue.dequeue();e.push(t)}for(let s=t.length-1;s>=0;s--){let i=t[s];console.log("Size is "+this.queue.size),i.render(e,s)}}deregisterStrategy(t){}registerStrategy(t){this.queue.enqueue(t,t.transform.z)}clear(){this.queue.clear(),console.log("Cleared queue length is "+this.queue.size)}}class p{constructor(t,e){this.tag=a,this.rendering=[],this.graphicsConfig=t,this.components=new Map,this.deleted=[],document.documentElement.style.height="100%",document.documentElement.style.width="100%",document.body.style.height="100%",document.body.style.width="100%",document.body.style.margin="0",this.renderStrategy=new l,this.contextInfo=e}register(t){if(null==t.componentId||null==t.componentId){console.log("Registering undefined id in Ggraphics");let e=r.getUniqueComponentId();t.componentId=e,t.system=this,t.context=this.contextInfo,1==t.rendered&&(this.rendering.push(t),console.log("Pushing to rendering")),t.initialize(),this.components.set(e,t)}else console.log("Graphics Registering id"+t.componentId),t.system=this,t.context=this.contextInfo,1==t.rendered&&(this.rendering.push(t),console.log("Pushing to rendering")),t.initialize(),this.components.set(t.componentId,t)}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e),console.log(e.entity+" s Component with id "+e.componentId+"is popped"))}update(t){this.contextInfo.ctx,console.log("Graphics engine running"),console.log("Graphics Components: "+this.components.size);for(let e of this.components){let s=e[1];s.update(t),0==s.rendered&&(this.renderStrategy.registerStrategy(s),console.log("Registered Strategy"))}for(console.log("Rendering Components: "+this.rendering.length),this.renderStrategy.render(this.rendering);this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(null==t?void 0:t.componentId)}}setScene(t){t.engineComponents.get(this.tag)}}class d{constructor(t){this.tag="PHYSICS",this.deleted=[],this.components=new Map,this.config=t}register(t){if(null==t.componentId||null==t.componentId){let e=r.getUniqueComponentId();t.componentId=e,t.system=this,this.components.set(e,t)}else t.system=this,this.components.set(t.componentId,t)}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e),console.log(e.entity+" s Component with id "+e.componentId+"is popped"))}update(t){console.log("Physics engine running"),console.log("Physics Components: "+this.components.size);for(let e of this.components)e[1].update(t);for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(null==t?void 0:t.componentId)}}}class u{constructor(t){this.tag="SCRIPTING",this.deleted=[],this.components=new Map,this.engineType=t}register(t){if(null==t.componentId||null==t.componentId){let e=r.getUniqueComponentId();t.componentId=e,t.system=this,this.components.set(e,t)}else t.componentId=t.componentId,t.system=this,this.components.set(t.componentId,t)}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){console.log("Scripting engine running"),console.log("Scripting Components: "+this.components.size);for(let e of this.components)e[1].engineType==this.engineType&&e[1].callback(t);for(;this.deleted.length>0;){let t=this.deleted.pop();this.components.delete(null==t?void 0:t.componentId)}}}class g{constructor(t){this.graphicsConfig=t,this.graphicsConfig=t,document.documentElement.style.height="100%",document.documentElement.style.width="100%",document.body.style.height="100%",document.body.style.width="100%",document.body.style.margin="0",this.setup(),this.canvas=this.generateCanvas(),this.ctx=this.canvas.getContext("2d"),this.div=this.generateDiv(this.graphicsConfig.parent)}generateDiv(t){let e=document.createElement("div");return e.id=t,e.style.height="100%",e.style.width="100%",e.style.zIndex="0",e.style.display="flex",e.style.justifyContent="center",e.appendChild(this.canvas),document.body.appendChild(e),console.log("test"),e}generateCanvas(){let t=document.createElement("CANVAS");return t.id=this.graphicsConfig.canvasID,console.log(this.parseStyle(this.graphicsConfig.style)),console.log("Before"),t.setAttribute("style",this.parseStyle(this.graphicsConfig.style)),t}getCtx(){return this.getCanvas().getContext("2d")}getCanvas(){let t=document.getElementById(this.graphicsConfig.canvasID);if(t instanceof HTMLCanvasElement)return t;throw Error("engineCanvas should be a reserved id for DOM Components")}parseStyle(t){let e=Object.entries(t).map((([t,e])=>t+":"+e+";"));return console.log(this.graphicsConfig.parent),e.join(" ")}setup(){if(this.graphicsConfig.background){let t=new Image;t.src=this.graphicsConfig.background,t.style.position="absolute",t.style.zIndex="-1",t.style.width="100%",t.style.height="100%",document.body.appendChild(t)}}}class m{constructor(t){this.deleted=[],this.system=t}registerComponent(t){}update(t){for(var[e,s]of this.system.components)if(s.visible)for(var[i,n]of this.system.components)n.visible&&s.checkCollision(n)&&s!=n?s.collides(n):n.alive||this.deleted.push(n)}}class f{constructor(t){this.tag="COLLISION",this.components=new Map,this.config=t,this.deleted=[],t.bounds&&(this.bounds=t.bounds),this.collisionStrategy=new m(this)}register(t){if(null==t.componentId||null==t.componentId){let e=r.getUniqueComponentId();t.componentId=e,t.system=this,this.components.set(e,t)}else t.system=this,this.components.set(t.componentId,t);this.collisionStrategy.registerComponent(t)}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){for(console.log("Collision System Running"),console.log("Collision Components: "+this.components.size),this.collisionStrategy.update(t);this.deleted.length>0;){let t=this.deleted.pop();t&&this.deleteComponent(t)}}deleteComponent(t){t.componentId&&this.components.delete(t.componentId)}}class y{constructor(e={engineType:t.CLIENTONLY},s){if(this.canvasID="engineCanvas",this.systems=[],this.time=0,this.engineConfig=e,e.graphicsConfig&&(this.contextInfo=new g(e.graphicsConfig)),this.engineConfig.eventConfig&&this.contextInfo&&this.systems.push(new h(this.engineConfig.eventConfig)),this.engineConfig.physicsConfig&&this.systems.push(new d(this.engineConfig.physicsConfig)),this.engineConfig.scriptingConfig&&this.systems.push(new u(this.engineConfig.engineType)),s)for(let t of s)this.systems.push(t);if(this.engineConfig.collisionConfig&&this.systems.push(new f(this.engineConfig.collisionConfig)),this.engineConfig.graphicsConfig&&this.contextInfo&&(this.graphics=new p(this.engineConfig.graphicsConfig,this.contextInfo),this.systems.push(this.graphics)),s)for(let t of s)this.systems.push(t);this.sceneManager=new r(this.engineConfig,this.engineConfig.sceneConfig,this.systems),this.running=!0,this.running=!1}start(e){this.running=!0,console.log("Startng Engin ");let s=this.sceneManager.getCurrentScene();for(let t of this.systems){let e=this.sceneManager.getCurrentScene().engineComponents.set(t.tag,t.components);if(s.engineComponents.set(t.tag,t.components),this.sceneManager.systemTag.set(t.tag,t),!e)throw Error("error in start method")}let i=s.entities;s.entities=new Map;for(let t of i)t[1].id,s.addEntity(s,t[1]);this.engineConfig.engineType==t.CLIENTONLY||this.engineConfig.engineType==t.SOCKETCLIENT?this.update(e):setTimeout((()=>{this.running&&this.serverUpdate(e),console.log("Timeout runout")}),e)}update(t){for(let e of this.systems)e.update(t);this.time+=t,console.log(this.time),window.requestAnimationFrame((e=>{this.time,this.update(t),this.time=e}))}serverUpdate(t){console.log("updating");for(let e of this.systems)e.update(t);this.time+=t,console.log(this.time),setTimeout((()=>{this.running&&this.serverUpdate(t)}),t)}}class v{constructor(t="engineDiv",e="engineCanvas",s={},i,n=1e3,o=500){this.width=n,this.height=o,this.parent=t,this.canvasID=e,this.style=s,this.background=i}}class b{constructor(t,e={x:0,y:0,z:0},s={x:0,y:0,z:0},i={x:0,y:0,z:0}){this.visible=!0,this.alive=!0,this.engineTag="PHYSICS",this.entity=t,this.pos=e,this.vel=s,this.accel=i}copy(t){this.pos.x=t.pos.x,this.pos.y=t.pos.y,this.pos.z=t.pos.z,this.vel.x=t.vel.x,this.vel.x=t.vel.x,this.vel.x=t.vel.x,this.accel.x=t.accel.x,this.accel.x=t.accel.x,this.accel.x=t.accel.x,this.entity=t.entity,this.componentId=t.componentId,this.visible=t.visible,this.alive=t.alive}update(t){console.log("Position is: "+this.pos.x+" and "+this.pos.y),this.vel.x=this.vel.x+this.accel.x*t,this.vel.y=this.vel.y+this.accel.y*t,this.vel.z=this.vel.z+this.accel.z*t,this.pos.x=this.pos.x+this.vel.x*t,this.pos.y=this.pos.y+this.vel.y*t,this.pos.z=this.pos.z+this.vel.z*t}toJSON(){return{pos:this.pos,vel:this.vel,accel:this.accel,entity:this.entity,componentId:this.componentId,visible:this.visible,alive:this.alive,engineTag:"PHYSICS"}}}function w(t){return t.pos.x-t.dim.length/2}function C(t){return t.pos.y-t.dim.height/2}class x{constructor(t,e,s){this.engineTag="GRAPHICS",this.rendered=!1,this.visible=!0,this.alive=!0,this.entity=t,this.src=s,this.shape=e,this.transform=this.shape.pos}copy(t){this.componentId=t.componentId,this.entity=t.entity,this.shape.dim.height=t.shape.dim.height,this.shape.dim.length=t.shape.dim.length,this.shape.pos.x=t.shape.pos.x,this.shape.pos.y=t.shape.pos.y,this.shape.pos.z=t.shape.pos.z,this.shape.rot=t.shape.rot,this.visible=t.visible,this.transform.x=t.transform.x,this.transform.y=t.transform.y,this.transform.z=t.transform.z}visit(t){}render(){if(this.context.ctx){let t=w(this.shape),e=C(this.shape);this.context.ctx.drawImage(this.image,t,e,this.shape.dim.length,this.shape.dim.height)}}update(t){}initialize(){this.image=new Image,this.image.src=this.src}setSrc(t){console.log("Source changed"),this.src=t,this.image.src=t}toJSON(){return{entity:this.entity,componentId:this.componentId,engineTag:this.engineTag,transform:this.transform,visible:this.visible,alive:this.alive,src:this.src,shape:this.shape,renderred:this.rendered}}}class E{constructor(t){this.engineTag="EVENTHANDLER",this.visible=!0,this.alive=!0,this.events=new Map,Object.entries(t).map((([t,e])=>{this.events.set(t,e)}))}execute(t){let e=this.events.get(t.eventName);e&&e(t)}getEventType(){return"MOUSE"}copy(t){this.entity=t.entity,this.componentId=t.componentId,this.visible=t.visible,this.alive=t.alive}initialize(t){t.registerListener(this)}update(t,e){console.log("In mouse Listener")}toJSON(){return{entity:this.entity,engineTag:"EVENTHANDLER",componentId:this.componentId,visible:this.visible,alive:this.alive}}getEvents(){return this.events}}class T{constructor(t){this.listeners=new Set,this.events=[],this.visible=!0,this.alive=!0,this.engineTag="EVENTHANDLER",this.engineType=t}initialize(e){if(e.registerEmitter(this),this.engineType!=t.SOCKETSERVER){const t=document.querySelector("canvas");t&&(window.addEventListener("click",(e=>{let s=t.getBoundingClientRect(),i=e.x/s.width*t.width,n=e.y/s.height*t.height;this.events.push({pos:{x:i,y:n,z:0},eventName:"click"})})),window.addEventListener("dblclick",(t=>{this.events.push({pos:{x:t.x,y:t.y,z:0},eventName:"dblclick"})})))}}addListener(t){this.listeners.add(t)}emit(t){for(let e of this.listeners)e.execute(t)}getEventType(){return"MOUSE"}update(t,e){for(let t=this.events.length-1;t>=0;t--)this.emit(this.events[t]),this.events.pop()}copy(t){this.alive=t.alive,this.visible=t.alive}toJSON(){return{visible:this.visible,alive:this.alive}}}class k{constructor(e,s=t.CLIENTONLY){this.engineTag="SCRIPTING",this.visible=!0,this.alive=!0,this.callback=e,this.engineType=s}copy(t){}update(t,e){this.callback(t)}toJSON(){return{entity:this.entity,engineTag:this.engineTag,componenId:this.componentId,callback:this.callback}}}class I{constructor(t=-1,e={length:20,height:20},s={x:0,y:0,z:0},i){this.engineTag="COLLISION",this.visible=!0,this.alive=!0,this.entity=t,this.collideType="Box",this.shape={pos:s,dim:e,rot:0},this.prev={x:s.x,y:s.y,z:s.z},this.boundingBox=this.shape,this.onCollision=i}copy(t){t.entity&&(this.entity=t.entity),this.prev.x=t.prev.x,this.prev.y=t.prev.y,this.prev.z=t.prev.z,this.alive=t.alive,this.collideType=t.collideType,this.componentId=this.componentId,this.engineTag=this.engineTag,this.shape.dim.height=t.shape.dim.height,this.shape.dim.length=t.shape.dim.length,this.shape.pos.x=t.shape.pos.x,this.shape.pos.y=t.shape.pos.y,this.shape.pos.z=t.shape.pos.z,this.shape.rot=t.shape.rot,this.visible=t.visible}checkCollision(t){if(t instanceof I){let e=t.shape,s=this.shape;if(0==e.rot&&0==s.rot){let t=e.pos.x-e.dim.length/2,i=e.pos.y-e.dim.height/2,n=s.pos.x-s.dim.length/2,o=s.pos.y-s.dim.height/2;return t+e.dim.length>n&&t<n+s.dim.length&&i+e.dim.height>o&&i<o+s.dim.height}}return!1}collides(t){this.onCollision(t)}update(t,e){this.prev.x=this.shape.pos.x,this.prev.y=this.shape.pos.y,this.prev.z=this.shape.pos.z}toJSON(){return{entity:this.entity,engineTag:this.engineTag,componentId:this.componentId,prev:this.prev,collideType:this.collideType,shape:this.shape,boundingBox:this.boundingBox,visible:this.visible,alive:this.alive}}}class S{constructor(e={x:200*Math.random(),y:200*Math.random(),z:0},s={x:2*Math.random()-1,y:2*Math.random()-1,z:0}){this.className="Player";let i=new I(-1,{length:64,height:64},e,(t=>{})),n=new x(-1,i.shape,"/images/Knight_Forward.png"),o=new b(-1,e,s),r=new k((t=>{o.pos.x<0&&(o.pos.x=0,o.vel.x*=-1),o.pos.x+i.shape.dim.length>300&&(o.pos.x=150,o.vel.x*=-1),o.pos.y<0&&(o.pos.y=0,o.vel.y*=-1),o.pos.y+ +i.shape.dim.height>300&&(o.pos.y=150,o.vel.y*=-1)}),t.SOCKETSERVER),h=new E({click:t=>{console.log("Click")}});this.components=[o,n,i,r,h]}}class O{constructor(t){this.className="Templar",this.transform=new b(-1,{x:20*Math.random(),y:30*Math.random(),z:20},{x:1,y:0,z:0}),this.sprite=new x(-1,{pos:this.transform.pos,dim:{length:64,height:64},rot:0},"/images/Templar.png"),this.components=[this.sprite],t&&(this.transform.pos.x=t.x,this.transform.pos.y=t.y)}}class N{constructor(t=-1,e=-1,s=-1,i={x:0,y:0,z:-1},n={x:1,y:1}){this.visible=!0,this.alive=!0,this.engineTag="GRAPHICS",this.rendered=!0,this.height=s,this.width=e,this.pos=i,this.transform={x:0,y:0,z:0},this.entity=t,this.scale=n}copy(t){this.entity=t.entity,this.componentId=t.componentId,this.width=t.width,this.height=t.height,this.visible=t.visible,this.alive=t.alive,this.scale.x=t.scale.x,this.scale.y=t.scale.y,this.rendered=t.rendered}initialize(){this.height<0&&(this.height=-1*this.height*this.context.canvas.height),this.width<0&&(this.width=-1*this.width*this.context.canvas.width),this.rendered&&(this.context.canvas.height=this.height,this.context.canvas.width=this.width)}update(t){this.context.ctx,this.pos.x+=this.transform.x,this.pos.y+=this.transform.y}render(t){this.context.ctx.translate(this.transform.x,this.transform.y),this.context.ctx.clearRect(-1*this.pos.x,-1*this.pos.y,this.width,this.height);let e=t;for(let s of e)s!=this&&s.render(t,-1);this.transform.x=0,this.transform.y=0,this.context.ctx.save()}toJSON(){return{entity:this.entity,componentId:this.componentId,width:this.width,height:this.height,visible:this.visible,alive:this.alive,scale:this.scale,rendered:this.rendered,pos:this.pos}}}class _{constructor(t){this.visible=!0,this.alive=!0,this.engineTag="EVENTHANDLER",this.events=new Map,Object.entries(t).map((([t,e])=>{this.events.set(t,e)}))}getEvents(){return this.events}execute(t){let e=this.events.get(t.eventName);e&&e(t)}getEventType(){return"KEYBOARD"}initialize(t){t.registerListener(this)}copy(t){this.entity=t.entity,this.alive=t.alive,this.visible=t.visible,this.componentId=t.componentId}update(t,e){}toJSON(){return{entity:this.entity,alive:this.alive,visible:this.visible,componentId:this.componentId}}}class R{constructor(t){this.listeners=new Set,this.events=[],this.visible=!0,this.alive=!0,this.engineTag="EVENTHANDLER",this.engineType=t}initialize(e){e.registerEmitter(this),this.engineType!=t.SOCKETSERVER&&window.addEventListener("keydown",(t=>{this.events.push({eventName:"keydown",key:t.key})}))}addListener(t){this.listeners.add(t)}emit(t){for(let e of this.listeners)e.execute(t)}getEventType(){return"KEYBOARD"}update(t,e){for(let t=this.events.length-1;t>=0;t--)this.emit(this.events[t]),this.events.pop()}copy(t){this.alive=t.alive,this.visible=t.alive}toJSON(){return{visible:this.visible,alive:this.alive}}}class L{constructor(){this.camera=new N(-1,1e3,500),this.className="MainCamera",this.components=[this.camera,new _({keydown:t=>{"w"==t.key?(this.camera.transform.y-=1,console.log("W is pressed")):"a"==t.key?this.camera.transform.x-=1:"d"==t.key?this.camera.transform.x+=1:this.camera.transform.y+=1}})]}}const A=Object.create(null);A.open="0",A.close="1",A.ping="2",A.pong="3",A.message="4",A.upgrade="5",A.noop="6";const z=Object.create(null);Object.keys(A).forEach((t=>{z[A[t]]=t}));const B={type:"error",data:"parser error"},M="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),q="function"==typeof ArrayBuffer,P=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer instanceof ArrayBuffer,D=({type:t,data:e},s,i)=>M&&e instanceof Blob?s?i(e):j(e,i):q&&(e instanceof ArrayBuffer||P(e))?s?i(e):j(new Blob([e]),i):i(A[t]+(e||"")),j=(t,e)=>{const s=new FileReader;return s.onload=function(){const t=s.result.split(",")[1];e("b"+(t||""))},s.readAsDataURL(t)};function U(t){return t instanceof Uint8Array?t:t instanceof ArrayBuffer?new Uint8Array(t):new Uint8Array(t.buffer,t.byteOffset,t.byteLength)}let H;function K(t,e){return M&&t.data instanceof Blob?t.data.arrayBuffer().then(U).then(e):q&&(t.data instanceof ArrayBuffer||P(t.data))?e(U(t.data)):void D(t,!1,(t=>{H||(H=new TextEncoder),e(H.encode(t))}))}const V="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let t=0;t<64;t++)V["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charCodeAt(t)]=t;const F="function"==typeof ArrayBuffer,Y=(t,e)=>{if("string"!=typeof t)return{type:"message",data:Q(t,e)};const s=t.charAt(0);return"b"===s?{type:"message",data:J(t.substring(1),e)}:z[s]?t.length>1?{type:z[s],data:t.substring(1)}:{type:z[s]}:B},J=(t,e)=>{if(F){const s=(t=>{let e,s,i,n,o,r=.75*t.length,h=t.length,a=0;"="===t[t.length-1]&&(r--,"="===t[t.length-2]&&r--);const c=new ArrayBuffer(r),l=new Uint8Array(c);for(e=0;e<h;e+=4)s=V[t.charCodeAt(e)],i=V[t.charCodeAt(e+1)],n=V[t.charCodeAt(e+2)],o=V[t.charCodeAt(e+3)],l[a++]=s<<2|i>>4,l[a++]=(15&i)<<4|n>>2,l[a++]=(3&n)<<6|63&o;return c})(t);return Q(s,e)}return{base64:!0,data:t}},Q=(t,e)=>"blob"===e?t instanceof Blob?t:new Blob([t]):t instanceof ArrayBuffer?t:t.buffer,W=String.fromCharCode(30);let $;function G(t){if(t)return function(t){for(var e in G.prototype)t[e]=G.prototype[e];return t}(t)}G.prototype.on=G.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},G.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},G.prototype.off=G.prototype.removeListener=G.prototype.removeAllListeners=G.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var s,i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var n=0;n<i.length;n++)if((s=i[n])===e||s.fn===e){i.splice(n,1);break}return 0===i.length&&delete this._callbacks["$"+t],this},G.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(s){i=0;for(var n=(s=s.slice(0)).length;i<n;++i)s[i].apply(this,e)}return this},G.prototype.emitReserved=G.prototype.emit,G.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},G.prototype.hasListeners=function(t){return!!this.listeners(t).length};const X="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function Z(t,...e){return e.reduce(((e,s)=>(t.hasOwnProperty(s)&&(e[s]=t[s]),e)),{})}const tt=X.setTimeout,et=X.clearTimeout;function st(t,e){e.useNativeTimers?(t.setTimeoutFn=tt.bind(X),t.clearTimeoutFn=et.bind(X)):(t.setTimeoutFn=X.setTimeout.bind(X),t.clearTimeoutFn=X.clearTimeout.bind(X))}class it extends Error{constructor(t,e,s){super(t),this.description=e,this.context=s,this.type="TransportError"}}class nt extends G{constructor(t){super(),this.writable=!1,st(this,t),this.opts=t,this.query=t.query,this.socket=t.socket}onError(t,e,s){return super.emitReserved("error",new it(t,e,s)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(t){const e=Y(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){super.emitReserved("packet",t)}onClose(t){this.readyState="closed",super.emitReserved("close",t)}pause(t){}createUri(t,e={}){return t+"://"+this._hostname()+this._port()+this.opts.path+this._query(e)}_hostname(){const t=this.opts.hostname;return-1===t.indexOf(":")?t:"["+t+"]"}_port(){return this.opts.port&&(this.opts.secure&&Number(443!==this.opts.port)||!this.opts.secure&&80!==Number(this.opts.port))?":"+this.opts.port:""}_query(t){const e=function(t){let e="";for(let s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e}(t);return e.length?"?"+e:""}}const ot="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),rt=64,ht={};let at,ct=0,lt=0;function pt(t){let e="";do{e=ot[t%rt]+e,t=Math.floor(t/rt)}while(t>0);return e}function dt(){const t=pt(+new Date);return t!==at?(ct=0,at=t):t+"."+pt(ct++)}for(;lt<rt;lt++)ht[ot[lt]]=lt;let ut=!1;try{ut="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){}const gt=ut;function mt(t){const e=t.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!e||gt))return new XMLHttpRequest}catch(t){}if(!e)try{return new(X[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}function ft(){}const yt=null!=new mt({xdomain:!1}).responseType;class vt extends G{constructor(t,e){super(),st(this,e),this.opts=e,this.method=e.method||"GET",this.uri=t,this.data=void 0!==e.data?e.data:null,this.create()}create(){var t;const e=Z(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd;const s=this.xhr=new mt(e);try{s.open(this.method,this.uri,!0);try{if(this.opts.extraHeaders){s.setDisableHeaderCheck&&s.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&s.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{s.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{s.setRequestHeader("Accept","*/*")}catch(t){}null===(t=this.opts.cookieJar)||void 0===t||t.addCookies(s),"withCredentials"in s&&(s.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(s.timeout=this.opts.requestTimeout),s.onreadystatechange=()=>{var t;3===s.readyState&&(null===(t=this.opts.cookieJar)||void 0===t||t.parseCookies(s)),4===s.readyState&&(200===s.status||1223===s.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof s.status?s.status:0)}),0))},s.send(this.data)}catch(t){return void this.setTimeoutFn((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=vt.requestsCount++,vt.requests[this.index]=this)}onError(t){this.emitReserved("error",t,this.xhr),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=ft,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete vt.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&(this.emitReserved("data",t),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}function bt(){for(let t in vt.requests)vt.requests.hasOwnProperty(t)&&vt.requests[t].abort()}vt.requestsCount=0,vt.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",bt):"function"==typeof addEventListener&&addEventListener("onpagehide"in X?"pagehide":"unload",bt,!1));const wt="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):(t,e)=>e(t,0),Ct=X.WebSocket||X.MozWebSocket,xt="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();function Et(t,e){return"message"===t.type&&"string"!=typeof t.data&&e[0]>=48&&e[0]<=54}const Tt={websocket:class extends nt{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,s=xt?{}:Z(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=xt?new Ct(t,e,s):e?new Ct(t,e):new Ct(t)}catch(t){return this.emitReserved("error",t)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=t=>this.onClose({description:"websocket connection closed",context:t}),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],i=e===t.length-1;D(s,this.supportsBinary,(t=>{try{this.ws.send(t)}catch(t){}i&&wt((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){const t=this.opts.secure?"wss":"ws",e=this.query||{};return this.opts.timestampRequests&&(e[this.opts.timestampParam]=dt()),this.supportsBinary||(e.b64=1),this.createUri(t,e)}check(){return!!Ct}},webtransport:class extends nt{get name(){return"webtransport"}doOpen(){"function"==typeof WebTransport&&(this.transport=new WebTransport(this.createUri("https"),this.opts.transportOptions[this.name]),this.transport.closed.then((()=>{this.onClose()})).catch((t=>{this.onError("webtransport error",t)})),this.transport.ready.then((()=>{this.transport.createBidirectionalStream().then((t=>{const e=t.readable.getReader();let s;this.writer=t.writable.getWriter();const i=()=>{e.read().then((({done:t,value:e})=>{t||(s||1!==e.byteLength||54!==e[0]?(this.onPacket(function(t,e,s){$||($=new TextDecoder);const i=e||t[0]<48||t[0]>54;return Y(i?t:$.decode(t),"arraybuffer")}(e,s)),s=!1):s=!0,i())})).catch((t=>{}))};i();const n=this.query.sid?`0{"sid":"${this.query.sid}"}`:"0";this.writer.write((new TextEncoder).encode(n)).then((()=>this.onOpen()))}))})))}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const s=t[e],i=e===t.length-1;K(s,(t=>{Et(s,t)&&this.writer.write(Uint8Array.of(54)),this.writer.write(t).then((()=>{i&&wt((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}))}}doClose(){var t;null===(t=this.transport)||void 0===t||t.close()}},polling:class extends nt{constructor(t){if(super(t),this.polling=!1,"undefined"!=typeof location){const e="https:"===location.protocol;let s=location.port;s||(s=e?"443":"80"),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||s!==t.port}const e=t&&t.forceBase64;this.supportsBinary=yt&&!e,this.opts.withCredentials&&(this.cookieJar=void 0)}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(t++,this.once("pollComplete",(function(){--t||e()}))),this.writable||(t++,this.once("drain",(function(){--t||e()})))}else e()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(t){((t,e)=>{const s=t.split(W),i=[];for(let t=0;t<s.length;t++){const n=Y(s[t],e);if(i.push(n),"error"===n.type)break}return i})(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const t=()=>{this.write([{type:"close"}])};"open"===this.readyState?t():this.once("open",t)}write(t){this.writable=!1,((t,e)=>{const s=t.length,i=new Array(s);let n=0;t.forEach(((t,o)=>{D(t,!1,(t=>{i[o]=t,++n===s&&e(i.join(W))}))}))})(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){const t=this.opts.secure?"https":"http",e=this.query||{};return!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=dt()),this.supportsBinary||e.sid||(e.b64=1),this.createUri(t,e)}request(t={}){return Object.assign(t,{xd:this.xd,cookieJar:this.cookieJar},this.opts),new vt(this.uri(),t)}doWrite(t,e){const s=this.request({method:"POST",data:t});s.on("success",e),s.on("error",((t,e)=>{this.onError("xhr post error",t,e)}))}doPoll(){const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",((t,e)=>{this.onError("xhr poll error",t,e)})),this.pollXhr=t}}},kt=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,It=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function St(t){const e=t,s=t.indexOf("["),i=t.indexOf("]");-1!=s&&-1!=i&&(t=t.substring(0,s)+t.substring(s,i).replace(/:/g,";")+t.substring(i,t.length));let n=kt.exec(t||""),o={},r=14;for(;r--;)o[It[r]]=n[r]||"";return-1!=s&&-1!=i&&(o.source=e,o.host=o.host.substring(1,o.host.length-1).replace(/;/g,":"),o.authority=o.authority.replace("[","").replace("]","").replace(/;/g,":"),o.ipv6uri=!0),o.pathNames=function(t,e){const s=e.replace(/\/{2,9}/g,"/").split("/");return"/"!=e.slice(0,1)&&0!==e.length||s.splice(0,1),"/"==e.slice(-1)&&s.splice(s.length-1,1),s}(0,o.path),o.queryKey=function(t,e){const s={};return e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,i){e&&(s[e]=i)})),s}(0,o.query),o}class Ot extends G{constructor(t,e={}){super(),this.writeBuffer=[],t&&"object"==typeof t&&(e=t,t=null),t?(t=St(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=St(e.host).host),st(this,e),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=e.transports||["polling","websocket","webtransport"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!1},e),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(t){let e={},s=t.split("&");for(let t=0,i=s.length;t<i;t++){let i=s[t].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){const e=Object.assign({},this.opts.query);e.EIO=4,e.transport=t,this.id&&(e.sid=this.id);const s=Object.assign({},this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port},this.opts.transportOptions[t]);return new Tt[t](s)}open(){let t;if(this.opts.rememberUpgrade&&Ot.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(t=>this.onClose("transport close",t)))}probe(t){let e=this.createTransport(t),s=!1;Ot.priorWebsocketSuccess=!1;const i=()=>{s||(e.send([{type:"ping",data:"probe"}]),e.once("packet",(t=>{if(!s)if("pong"===t.type&&"probe"===t.data){if(this.upgrading=!0,this.emitReserved("upgrading",e),!e)return;Ot.priorWebsocketSuccess="websocket"===e.name,this.transport.pause((()=>{s||"closed"!==this.readyState&&(c(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emitReserved("upgrade",e),e=null,this.upgrading=!1,this.flush())}))}else{const t=new Error("probe error");t.transport=e.name,this.emitReserved("upgradeError",t)}})))};function n(){s||(s=!0,c(),e.close(),e=null)}const o=t=>{const s=new Error("probe error: "+t);s.transport=e.name,n(),this.emitReserved("upgradeError",s)};function r(){o("transport closed")}function h(){o("socket closed")}function a(t){e&&t.name!==e.name&&n()}const c=()=>{e.removeListener("open",i),e.removeListener("error",o),e.removeListener("close",r),this.off("close",h),this.off("upgrading",a)};e.once("open",i),e.once("error",o),e.once("close",r),this.once("close",h),this.once("upgrading",a),-1!==this.upgrades.indexOf("webtransport")&&"webtransport"!==t?this.setTimeoutFn((()=>{s||e.open()}),200):e.open()}onOpen(){if(this.readyState="open",Ot.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data)}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.maxPayload=t.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const t=this.getWritablePackets();this.transport.send(t),this.prevBufferLen=t.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let t=1;for(let s=0;s<this.writeBuffer.length;s++){const i=this.writeBuffer[s].data;if(i&&(t+="string"==typeof(e=i)?function(t){let e=0,s=0;for(let i=0,n=t.length;i<n;i++)e=t.charCodeAt(i),e<128?s+=1:e<2048?s+=2:e<55296||e>=57344?s+=3:(i++,s+=4);return s}(e):Math.ceil(1.33*(e.byteLength||e.size))),s>0&&t>this.maxPayload)return this.writeBuffer.slice(0,s);t+=2}var e;return this.writeBuffer}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,i){if("function"==typeof e&&(i=e,e=void 0),"function"==typeof s&&(i=s,s=null),"closing"===this.readyState||"closed"===this.readyState)return;(s=s||{}).compress=!1!==s.compress;const n={type:t,data:e,options:s};this.emitReserved("packetCreate",n),this.writeBuffer.push(n),i&&this.once("flush",i),this.flush()}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},e=()=>{this.off("upgrade",e),this.off("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?s():t()})):this.upgrading?s():t()),this}onError(t){Ot.priorWebsocketSuccess=!1,this.emitReserved("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let s=0;const i=t.length;for(;s<i;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}}Ot.protocol=4,Ot.protocol;const Nt="function"==typeof ArrayBuffer,_t=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer,Rt=Object.prototype.toString,Lt="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Rt.call(Blob),At="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===Rt.call(File);function zt(t){return Nt&&(t instanceof ArrayBuffer||_t(t))||Lt&&t instanceof Blob||At&&t instanceof File}function Bt(t,e){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let e=0,s=t.length;e<s;e++)if(Bt(t[e]))return!0;return!1}if(zt(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return Bt(t.toJSON(),!0);for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&Bt(t[e]))return!0;return!1}function Mt(t){const e=[],s=t.data,i=t;return i.data=qt(s,e),i.attachments=e.length,{packet:i,buffers:e}}function qt(t,e){if(!t)return t;if(zt(t)){const s={_placeholder:!0,num:e.length};return e.push(t),s}if(Array.isArray(t)){const s=new Array(t.length);for(let i=0;i<t.length;i++)s[i]=qt(t[i],e);return s}if("object"==typeof t&&!(t instanceof Date)){const s={};for(const i in t)Object.prototype.hasOwnProperty.call(t,i)&&(s[i]=qt(t[i],e));return s}return t}function Pt(t,e){return t.data=Dt(t.data,e),delete t.attachments,t}function Dt(t,e){if(!t)return t;if(t&&!0===t._placeholder){if("number"==typeof t.num&&t.num>=0&&t.num<e.length)return e[t.num];throw new Error("illegal attachments")}if(Array.isArray(t))for(let s=0;s<t.length;s++)t[s]=Dt(t[s],e);else if("object"==typeof t)for(const s in t)Object.prototype.hasOwnProperty.call(t,s)&&(t[s]=Dt(t[s],e));return t}const jt=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"],Ut=5;var Ht;!function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(Ht||(Ht={}));class Kt{constructor(t){this.replacer=t}encode(t){return t.type!==Ht.EVENT&&t.type!==Ht.ACK||!Bt(t)?[this.encodeAsString(t)]:this.encodeAsBinary({type:t.type===Ht.EVENT?Ht.BINARY_EVENT:Ht.BINARY_ACK,nsp:t.nsp,data:t.data,id:t.id})}encodeAsString(t){let e=""+t.type;return t.type!==Ht.BINARY_EVENT&&t.type!==Ht.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data,this.replacer)),e}encodeAsBinary(t){const e=Mt(t),s=this.encodeAsString(e.packet),i=e.buffers;return i.unshift(s),i}}function Vt(t){return"[object Object]"===Object.prototype.toString.call(t)}class Ft extends G{constructor(t){super(),this.reviver=t}add(t){let e;if("string"==typeof t){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");e=this.decodeString(t);const s=e.type===Ht.BINARY_EVENT;s||e.type===Ht.BINARY_ACK?(e.type=s?Ht.EVENT:Ht.ACK,this.reconstructor=new Yt(e),0===e.attachments&&super.emitReserved("decoded",e)):super.emitReserved("decoded",e)}else{if(!zt(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;const s={type:Number(t.charAt(0))};if(void 0===Ht[s.type])throw new Error("unknown packet type "+s.type);if(s.type===Ht.BINARY_EVENT||s.type===Ht.BINARY_ACK){const i=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const n=t.substring(i,e);if(n!=Number(n)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(n)}if("/"===t.charAt(e+1)){const i=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);s.nsp=t.substring(i,e)}else s.nsp="/";const i=t.charAt(e+1);if(""!==i&&Number(i)==i){const i=e+1;for(;++e;){const s=t.charAt(e);if(null==s||Number(s)!=s){--e;break}if(e===t.length)break}s.id=Number(t.substring(i,e+1))}if(t.charAt(++e)){const i=this.tryParse(t.substr(e));if(!Ft.isPayloadValid(s.type,i))throw new Error("invalid payload");s.data=i}return s}tryParse(t){try{return JSON.parse(t,this.reviver)}catch(t){return!1}}static isPayloadValid(t,e){switch(t){case Ht.CONNECT:return Vt(e);case Ht.DISCONNECT:return void 0===e;case Ht.CONNECT_ERROR:return"string"==typeof e||Vt(e);case Ht.EVENT:case Ht.BINARY_EVENT:return Array.isArray(e)&&("number"==typeof e[0]||"string"==typeof e[0]&&-1===jt.indexOf(e[0]));case Ht.ACK:case Ht.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class Yt{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=Pt(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function Jt(t,e,s){return t.on(e,s),function(){t.off(e,s)}}const Qt=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Wt extends G{constructor(t,e,s){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,s&&s.auth&&(this.auth=s.auth),this._opts=Object.assign({},s),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const t=this.io;this.subs=[Jt(t,"open",this.onopen.bind(this)),Jt(t,"packet",this.onpacket.bind(this)),Jt(t,"error",this.onerror.bind(this)),Jt(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(Qt.hasOwnProperty(t))throw new Error('"'+t.toString()+'" is a reserved event name');if(e.unshift(t),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(e),this;const s={type:Ht.EVENT,data:e,options:{}};if(s.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]){const t=this.ids++,i=e.pop();this._registerAckCallback(t,i),s.id=t}const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!i||!this.connected)||(this.connected?(this.notifyOutgoingListeners(s),this.packet(s)):this.sendBuffer.push(s)),this.flags={},this}_registerAckCallback(t,e){var s;const i=null!==(s=this.flags.timeout)&&void 0!==s?s:this._opts.ackTimeout;if(void 0===i)return void(this.acks[t]=e);const n=this.io.setTimeoutFn((()=>{delete this.acks[t];for(let e=0;e<this.sendBuffer.length;e++)this.sendBuffer[e].id===t&&this.sendBuffer.splice(e,1);e.call(this,new Error("operation has timed out"))}),i);this.acks[t]=(...t)=>{this.io.clearTimeoutFn(n),e.apply(this,[null,...t])}}emitWithAck(t,...e){const s=void 0!==this.flags.timeout||void 0!==this._opts.ackTimeout;return new Promise(((i,n)=>{e.push(((t,e)=>s?t?n(t):i(e):i(t))),this.emit(t,...e)}))}_addToQueue(t){let e;"function"==typeof t[t.length-1]&&(e=t.pop());const s={id:this._queueSeq++,tryCount:0,pending:!1,args:t,flags:Object.assign({fromQueue:!0},this.flags)};t.push(((t,...i)=>{if(s===this._queue[0])return null!==t?s.tryCount>this._opts.retries&&(this._queue.shift(),e&&e(t)):(this._queue.shift(),e&&e(null,...i)),s.pending=!1,this._drainQueue()})),this._queue.push(s),this._drainQueue()}_drainQueue(t=!1){if(!this.connected||0===this._queue.length)return;const e=this._queue[0];e.pending&&!t||(e.pending=!0,e.tryCount++,this.flags=e.flags,this.emit.apply(this,e.args))}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){"function"==typeof this.auth?this.auth((t=>{this._sendConnectPacket(t)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(t){this.packet({type:Ht.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},t):t})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t,e){this.connected=!1,delete this.id,this.emitReserved("disconnect",t,e)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case Ht.CONNECT:t.data&&t.data.sid?this.onconnect(t.data.sid,t.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case Ht.EVENT:case Ht.BINARY_EVENT:this.onevent(t);break;case Ht.ACK:case Ht.BINARY_ACK:this.onack(t);break;case Ht.DISCONNECT:this.ondisconnect();break;case Ht.CONNECT_ERROR:this.destroy();const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const s of e)s.apply(this,t)}super.emit.apply(this,t),this._pid&&t.length&&"string"==typeof t[t.length-1]&&(this._lastOffset=t[t.length-1])}ack(t){const e=this;let s=!1;return function(...i){s||(s=!0,e.packet({type:Ht.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}onconnect(t,e){this.id=t,this.recovered=e&&this._pid===e,this._pid=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>{this.notifyOutgoingListeners(t),this.packet(t)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:Ht.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(t),this}prependAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(t),this}offAnyOutgoing(t){if(!this._anyOutgoingListeners)return this;if(t){const e=this._anyOutgoingListeners;for(let s=0;s<e.length;s++)if(t===e[s])return e.splice(s,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(t){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const e=this._anyOutgoingListeners.slice();for(const s of e)s.apply(this,t.data)}}}function $t(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}$t.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),s=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-s:t+s}return 0|Math.min(t,this.max)},$t.prototype.reset=function(){this.attempts=0},$t.prototype.setMin=function(t){this.ms=t},$t.prototype.setMax=function(t){this.max=t},$t.prototype.setJitter=function(t){this.jitter=t};class Gt extends G{constructor(t,e){var i;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,st(this,e),this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(i=e.randomizationFactor)&&void 0!==i?i:.5),this.backoff=new $t({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const n=e.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(~this._readyState.indexOf("open"))return this;this.engine=new Ot(this.uri,this.opts);const e=this.engine,s=this;this._readyState="opening",this.skipReconnect=!1;const i=Jt(e,"open",(function(){s.onopen(),t&&t()})),n=e=>{this.cleanup(),this._readyState="closed",this.emitReserved("error",e),t?t(e):this.maybeReconnectOnOpen()},o=Jt(e,"error",n);if(!1!==this._timeout){const t=this._timeout,s=this.setTimeoutFn((()=>{i(),n(new Error("timeout")),e.close()}),t);this.opts.autoUnref&&s.unref(),this.subs.push((()=>{this.clearTimeoutFn(s)}))}return this.subs.push(i),this.subs.push(o),this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(Jt(t,"ping",this.onping.bind(this)),Jt(t,"data",this.ondata.bind(this)),Jt(t,"error",this.onerror.bind(this)),Jt(t,"close",this.onclose.bind(this)),Jt(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){try{this.decoder.add(t)}catch(t){this.onclose("parse error",t)}}ondecoded(t){wt((()=>{this.emitReserved("packet",t)}),this.setTimeoutFn)}onerror(t){this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s?this._autoConnect&&!s.active&&s.connect():(s=new Wt(this,t,e),this.nsps[t]=s),s}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return;this._close()}_packet(t){const e=this.encoder.encode(t);for(let s=0;s<e.length;s++)this.engine.write(e[s],t.options)}cleanup(){this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t,e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t,e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn((()=>{t.skipReconnect||(this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):t.onreconnect()})))}),e);this.opts.autoUnref&&s.unref(),this.subs.push((()=>{this.clearTimeoutFn(s)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const Xt={};function Zt(t,e){"object"==typeof t&&(e=t,t=void 0);const s=function(t,e="",s){let i=t;s=s||"undefined"!=typeof location&&location,null==t&&(t=s.protocol+"//"+s.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==s?s.protocol+"//"+t:"https://"+t),i=St(t)),i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443")),i.path=i.path||"/";const n=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+n+":"+i.port+e,i.href=i.protocol+"://"+n+(s&&s.port===i.port?"":":"+i.port),i}(t,(e=e||{}).path||"/socket.io"),i=s.source,n=s.id,o=s.path,r=Xt[n]&&o in Xt[n].nsps;let h;return e.forceNew||e["force new connection"]||!1===e.multiplex||r?h=new Gt(i,e):(Xt[n]||(Xt[n]=new Gt(i,e)),h=Xt[n]),s.query&&!e.query&&(e.query=s.queryKey),h.socket(s.path,e)}Object.assign(Zt,{Manager:Gt,Socket:Wt,io:Zt,connect:Zt});class te{constructor(t,e){this.tag="EVENTHANDLER",this.emitters=new Map,this.unregistered=new Map,this.listeners=[],this.deleted=[],this.components=new Map,this.config=e,this.sceneManager=t,te.socket=Zt(),e.socketEventMap&&e.socketEventMap(te.socket),window.addEventListener("click",(t=>{te.socket.emit("click")})),window.addEventListener("keydown",(t=>{te.socket.emit("keydown",t.key)}))}getConfig(){return this.config}registerListener(t){let e=this.emitters.get(t.getEventType());e?e.addListener(t):this.listeners.push(t)}registerEmitter(t){this.emitters.set(t.getEventType(),t)}register(t){if(null==t.componentId||null==t.componentId){let e=r.getUniqueComponentId();t.componentId=e,t.system=this,t.initialize(this),this.components.set(e,t)}else t.system=this,this.components.set(t.componentId,t),t.initialize(this);console.log("Socket Manager registered")}unregister(t){let e=this.components.get(t);e&&(e.alive=!1,this.deleted.push(e))}update(t){console.log("Client Socket Handler"),console.log("Client Socket Handler Components:"+this.components.size);for(let e of this.emitters)e[1].update(t);for(let t=this.listeners.length-1;t>=0;t--){let e=this.emitters.get(this.listeners[t].getEventType());e&&(e.addListener(this.listeners[t]),this.listeners[t]=this.listeners[this.listeners.length-1],this.listeners.pop())}}}class ee{update(t,e){}constructor(t){this.engineTag="GRAPHICS",this.visible=!0,this.alive=!0,this.rendered=!1,this.transform={x:100,y:100,z:0},this.text=t}copy(t){this.componentId=t.componentId,this.entity=t.entity,this.text=t.text,this.transform.x=this.transform.x,this.transform.y=this.transform.y}render(){this.context&&this.context.ctx.fillText(this.text,this.transform.x,this.transform.y)}initialize(){}toJson(){return{entity:this.entity,engineTag:this.engineTag,componentId:this.componentId,text:this.text,visible:this.visible,alive:this.alive,transform:this.transform}}}class se{constructor(){this.text=new ee("test"),this.components=[this.text],this.className="Label"}}class ie{constructor(t,e,s,i){this.visible=!0,this.alive=!0,this.engineTag=a,this.state=0,this.time=0,this.rendered=!1,this.path=t,this.transform=e.pos,this.shape=e,this.delay=s}render(){if(this.context.ctx){let t=w(this.shape);console.log("Drawn with State "+this.state);let e=C(this.shape);this.context.ctx.drawImage(this.image,this.shape.dim.length*this.state,0,this.shape.dim.length,this.shape.dim.height,t,e,this.shape.dim.length,this.shape.dim.height)}else console.log("Context is not injected")}initialize(){this.image=new Image,this.image.src=this.path,this.state=0}update(t,e){if(this.time+=t,console.log("Updating Spritesheet"),this.time>this.delay){console.log("Time is greater than delay");let t=Math.floor(this.time/this.delay),e=Math.floor(this.image.width/this.shape.dim.length);console.log("Image width is "+this.image.width),console.log("State change is "+t),this.state=(1+this.state)%e,this.time=this.time%this.delay}}copy(t){var e,s;this.entity=t.entity,this.visible=t.visible,this.alive=t.alive,this.componentId=t.componentId,this.path=t.path,this.delay=t.delay,this.rendered=t.rendered,this.transform.x=t.transform.x,this.transform.y=t.transform.y,this.transform.z=t.transform.z,e=this.shape,s=t.shape,e.dim.height=s.dim.height,e.dim.length=s.dim.length,e.pos.x=s.pos.x,e.pos.y=s.pos.y,e.pos.z=s.pos.z,e.rot=s.rot}toJSON(){return{entity:this.entity,componentId:this.componentId,engineTag:this.engineTag,transform:this.transform,visible:this.visible,alive:this.alive,src:this.path,shape:this.shape,delay:this.delay,state:this.state,time:this.time,path:this.path,rendered:this.rendered}}}class ne{constructor(){this.components=[new ie("/images/SwordSpriteSheet.png",{dim:{length:32,height:32},pos:{x:20,y:20,z:0},rot:0},3,32)],this.className="SWORDANIM"}}class oe{constructor(t,e,s="",i=(()=>{})){this.rendered=!0,this.transform={x:0,y:0,z:0},this.visible=!0,this.alive=!0,this.engineTag=a,this.id=t,this.style=e,this.src=s,this.onClick=i}unmount(){throw new Error("Method not implemented.")}update(t,e){}copy(t){throw new Error("Method not implemented.")}render(t,e){this.alive||(this.system.rendering[e]=this.system.rendering[this.system.rendering.length-1],this.system.rendering.pop()),this.visible||(this.context.div.appendChild(this.element),this.visible=!0)}initialize(){let t=document.createElement("BUTTON");this.element=t,this.element.style.cssText=this.style,this.element.onclick=this.onClick,this.element.id=this.id,this.childImage=new Image,this.childImage.src=this.src,this.element.appendChild(this.childImage)}}class re{constructor(t,e,...s){this.rendered=!0,this.transform={x:0,y:0,z:0},this.visible=!1,this.alive=!0,this.engineTag=a,this.id=t,this.style=e,this.children=s}unmount(){this.element.remove(),this.system.unregister(this.componentId);for(let t=0;t<this.children.length;t++){if(!this.children[t].componentId)throw new Error;this.system.unregister(this.children[t].componentId)}}render(t,e){if(this.alive)this.visible||(this.context.div.appendChild(this.element),this.visible=!0);else{let t=this.system.rendering[e];this.system.rendering[e]=this.system.rendering[this.system.rendering.length-1],this.system.rendering[this.system.rendering.length-1]=t,this.system.rendering.pop(),this.unmount()}}initialize(){this.element=document.createElement("div"),this.element.style.cssText=this.style,this.element.id=this.id;for(let t=0;t<this.children.length;t++)this.children[t].entity=this.entity,this.children[t].visible=!0,this.system.register(this.children[t]),this.element.appendChild(this.children[t].element)}update(t,e){if(0==this.alive)for(let t=0;t<this.children.length;t++)this.children[t].alive=!1}copy(t){throw new Error("Method not implemented.")}}class he{unmount(){throw new Error("Method not implemented.")}render(t,e){this.alive||(this.system.rendering[e]=this.system.rendering[this.system.rendering.length-1],this.system.rendering.pop(),this.element.remove()),this.visible||(this.context.div.appendChild(this.element),this.visible=!0)}initialize(){this.element=document.createElement(this.htmlTag),this.element.style.cssText=this.style,this.element.id=this.id,this.element.textContent=this.text}update(t,e){}copy(t){throw new Error("Method not implemented.")}constructor(t,e,s,i=""){this.rendered=!0,this.transform={x:0,y:0,z:0},this.visible=!0,this.alive=!0,this.engineTag=a,this.style=e,this.id=t,this.htmlTag=s,this.text=i}}class ae{constructor(){this.className="DIV";let t=new re("backgroundDiv","position:fixed;background-color:#1a1818;height: 60%; width: 60%;z-index: 4;top: 0;left: 0; bottom:0; right:0;margin:auto;opacity:0.6;border-radius:15px"),e=this.generateButton("0","/images/Templar.png","Templar"),s=this.generateButton("1","/images/Knight_Forward.png","Knight"),i=this.generateButton("2","/images/Archer.png","Archer"),n=this.generateButton("3","/images/Priest.png","Priest"),o=this.generateButton("4","/images/Rogue.png","Rogue"),r=new re("identifier","display:flex;justify-content:center;align-items:center;position: fixed;background-color:#1a1818;opacity:0.2; height: 60%; width: 60%;z-index: 5;top: 0;left: 0; bottom:0; right:0;margin:auto;opacity:0.6;border-radius:15px",e,s,n,i,o);this.components=[t,r]}generateButton(t,e,s){let i="buttonDiv"+t,n=new oe(s+t,"display:flex;justify-content:center;align-items:center;background-color: #1a1818",e,(()=>{!function(t,e){let s=t.entities.get(e);if(s){t.entities.delete(e);for(let t of s.components)console.log("Component"),console.log(t),console.log("System"),console.log(t.system),console.log("Component id "),console.log(t.componentId),t.system.unregister(t.componentId)}}(this.scene,this.id)})),o=new he(s+"label","","h5",s);return new re(i,"display:flex;position:relative;flex-direction:column;justify-content:center;align-items: center;background-color:#1a1818;height: 100%; width: 100%;z-index: 4;border-radius:15px",n,o)}}class ce{constructor(t,e){this.emissionQueue=[],this.listenQueue=new Map,this.listenerLock=!1,this.visible=!0,this.alive=!0,this.engineTag="EVENTHANDLER",this.socketMap=t,this.engineType=e,this.events=new Map}initialize(t){t.registerEmitter(this),t.registerListener(this),Object.entries(this.socketMap).map((([t,e])=>{this.events.set(t,e),te.socket.on(t,(e=>{this.events.get(t)&&!this.listenerLock&&this.listenQueue.set(t,{event:t,data:e})}))}))}addListener(t){let e=t.getEvents();for(let t of e)te.socket.on(t[0],t[1])}emit(t){te.socket.emit(t.event,t.data)}update(t,e){for(let t=this.emissionQueue.length-1;t>=0;t--)this.emit(this.emissionQueue[t]),this.emissionQueue.pop();this.listenerLock=!0;for(let t of this.listenQueue){let e=this.events.get(t[0]);if(!e)throw new Error;e(t[1].data)}this.listenQueue.clear(),this.listenerLock=!1}queueEvent(t){this.emissionQueue.push(t)}copy(t){this.visible=t.visible,this.alive=t.alive,this.engineType=t.engineType}getEventType(){return"SocketServer"}execute(t){if(t){let e=this.events.get(t.event);e&&e(t.data)}}getEvents(){let t=new Map;return Object.entries(this.socketMap).map((([e,s])=>{t.set(e,s)})),t}toJSON(){let e=this.engineType==t.SOCKETCLIENT?t.SOCKETSERVER:t.SOCKETCLIENT;return{visible:this.visible,alive:this.alive,engineType:e}}}class le{constructor(t){this.getQuad=new Map,this.parentNode=new pe(t)}query(t){return this.parentNode.query(t)}clear(){this.parentNode.clear()}insert(t){let e=this.parentNode.insert(t);return this.getQuad.set(t,e),e}remove(t){let e=this.getQuad.get(t);if(!e)throw new Error;e.remove(t),this.getQuad.delete(t)}toString(){return this.parentNode.toString()}}class pe{constructor(t,e=0){this.children=[],this.items=[],this.depth=0,this.maxDepth=3,this.area=t,this.depth=e,this.resize(t)}query(t){let e=[];return this.queryHelper(t,e),e}queryHelper(t,e){for(let s=0;s<this.items.length;s++)ue(t,this.items[s])&&e.push(this.items[s]);for(let s=0;s<this.children.length;s++)de(t,this.children[s].area)?this.children[s].getItemList(e):ue(this.children[s].area,t)&&this.children[s].queryHelper(t,e)}getItemList(t){for(let e of this.items)t.push(e);for(let e=0;e<this.children.length;e++)this.children[e].getItemList(t)}remove(t){for(let e=this.items.length-1;e>=0;e--)if(this.items[e]==t)return this.items[e]=this.items[this.items.length-1],this.items.pop(),!0;for(let e of this.children)if(e.remove(t))return!0;return!1}resize(t){this.clear(),this.area=t,this.depth+1<this.maxDepth&&(this.children.push(new pe({pos:{x:t.pos.x-t.dim.length/4,y:t.pos.y+t.dim.height/4},dim:{length:t.dim.length/2,height:t.dim.height/2}},this.depth+1)),this.children.push(new pe({pos:{x:t.pos.x-t.dim.length/4,y:t.pos.y-t.dim.height/4},dim:{length:t.dim.length/2,height:t.dim.height/2}},this.depth+1)),this.children.push(new pe({pos:{x:t.pos.x+t.dim.length/4,y:t.pos.y+t.dim.height/4},dim:{length:t.dim.length/2,height:t.dim.height/2}},this.depth+1)),this.children.push(new pe({pos:{x:t.pos.x+t.dim.length/4,y:t.pos.y-t.dim.height/4},dim:{length:t.dim.length/2,height:t.dim.height/2}},this.depth+1)))}clear(){this.items.length=0;for(let t=this.children.length-1;t>=0;t--)this.children[t].clear(),this.children.pop()}size(){let t=this.items.length;for(let e=0;e<4;e++)t+=this.children[e].size();return t}insert(t){for(let e=0;e<this.children.length;e++)if(de(this.children[e].area,t)&&this.depth+1<this.maxDepth)return this.children[e].insert(t);return this.items.push(t),this}toString(){let t="";for(let e=0;e<this.depth;e++)t+="     ";let e=""+t;e+=`Quad Position is ${this.area.pos.x},${this.area.pos.y} with area ${this.area.dim.height} x ${this.area.dim.height} \n`,e+=t,e+="Quad has "+this.children.length+" children at depth "+this.depth+"\n",e+=t,e+="Quad has "+this.items.length+" items\n",e+=t;for(let t of this.items)e+=JSON.stringify(t),e+="\n";for(let s of this.children)e+=t+"\n",e+=s;return e}}function de(t,e){let s=e.pos.x-e.dim.length/2,i=e.pos.y-e.dim.height/2,n=t.pos.x-t.dim.length/2,o=t.pos.y-t.dim.height/2;return s>=n&&s+e.dim.length<n+t.dim.length&&i>=o&&i+e.dim.height<o+t.dim.height}function ue(t,e){let s=t.pos.x-t.dim.length/2,i=t.pos.y-t.dim.height/2,n=e.pos.x-e.dim.length/2,o=e.pos.y-e.dim.height/2;return s<n+e.dim.length&&s+t.dim.length>n&&i<o+e.dim.height&&i+t.dim.height>o}class ge{update(t,e){}constructor(t,e="#000000",s=0){this.engineTag="GRAPHICS",this.borderOutline=0,this.rendered=!1,this.visible=!0,this.alive=!0,this.shape=t,this.transform=t.pos,this.color=e,this.borderOutline=s}copy(t){this.entity=t.entity,this.componentId=t.componentId,this.transform.x=t.transform.x,this.transform.y=t.transform.y,this.transform.z=t.transform.z,this.color=t.color,this.visible=t.visible,this.alive=t.alive}initialize(){}render(){this.context.ctx&&(this.context.ctx.fillStyle=this.color,this.context.ctx.fillRect(this.shape.pos.x-this.shape.dim.length/2,this.shape.pos.y-this.shape.dim.height/2,this.shape.dim.length,this.shape.dim.height),this.borderOutline>0&&this.context.ctx.clearRect(this.shape.pos.x-(this.shape.dim.length-this.borderOutline)/2,this.shape.pos.y-(this.shape.dim.height-this.borderOutline)/2,this.shape.dim.length-this.borderOutline,this.shape.dim.height-this.borderOutline))}}class me{constructor(t,e){this.components=[],this.className="RECTANGLE";let s=new ge({pos:t,dim:e,rot:0});this.rectangle=s,this.pos=s.shape.pos,this.dim=s.shape.dim,this.components.push(s)}}class fe{constructor(e){this.something=0,this.components=[],this.className="World";let s=new le({pos:{x:500,y:250},dim:{height:500,length:1e3}}),i=[s.parentNode],n=new Map;for(;i.length>0;){let t=i.pop();if(t){for(let e=0;e<(null==t?void 0:t.children.length);e++)i.push(t.children[e]);let e=new ge({pos:{x:t.area.pos.x,y:t.area.pos.y,z:-t.depth},dim:{height:t.area.dim.height-4*Math.abs(t.depth),length:t.area.dim.length-4*Math.abs(t.depth)},rot:0},ye(),10);this.components.push(e),n.set(t,e)}}let r=new E({click:t=>{if(console.log("Position x is "+t.pos.x),console.log("Position y is "+t.pos.y),console.log("Name is "+t.eventName),this.something++,this.scene){let e={x:t.pos.x,y:t.pos.y,z:-20},i={length:30*Math.random()+1,height:30*Math.random()+1},o=new me(e,i);this.scene.addEntity(this.scene,o);let r=s.insert(o.rectangle.shape),h=n.get(r);h&&(o.rectangle.color=h.color)}},dblclick:t=>{}}),h=new Map;h.set("Templar",(()=>new O)),h.set("MainCamera",(()=>(console.log("camera made"),new L))),h.set("Player",(()=>new S)),h.set("Label",(()=>new se)),h.set("SWORDANIM",(()=>new ne)),this.components.push(new T(e),r,new R(e),new ce({update:t=>{if(this.scene){let e=t;for(let t of e){let e=this.scene;if(!e)throw new Error("Scene not found");if(e.entities.get(t.id))for(let s=0;s<t.components.length;s++){let i=e.engineComponents.get(t.components[s].engineTag),n=null==i?void 0:i.get(t.components[s].componentId);n&&n.copy(t.components[s])}else{console.log("Adding new Entity");let s=h.get(t.entityClass);if(s){let i=s();i.id=t.id,i.scene=e;for(let e=0;e<i.components.length;e++)i.components[e].copy(t.components[e]);o(e,i)}}}}}},t.SOCKETCLIENT))}}function ye(){for(var t="#",e=0;e<6;e++)t+="0123456789ABCDEF"[Math.floor(16*Math.random())];return t}window.onload=()=>{let e=new y({engineType:t.SOCKETCLIENT,graphicsConfig:new v("test","193as",{"display:flex;background-color":"white",width:"100%",height:"100%","z-index":"0"}),sceneConfig:[new class{constructor(t){this.name="test",this.time=0,this.entities=new Map,this.engineComponents=new Map;for(let e=0;e<t.length;e++)this.entities.set(e,t[e])}}([new L,new O,new ae,new fe(t.SOCKETCLIENT)])],scriptingConfig:{}}),s=new Map;s.set("Templar",(()=>new O)),s.set("MainCamera",(()=>(console.log("camera made"),new L))),s.set("Player",(()=>new S)),s.set("Label",(()=>new se)),s.set("SWORDANIM",(()=>new ne)),e.systems.push(new te(e.sceneManager,{entityFactoryMap:s,socketEventMap:t=>{t.on("connect",(()=>{console.log("connected");let e=window.location.pathname.split("/");t.emit("joined",window.sessionStorage.getItem("PlayerName"),e[e.length-1]),console.log("emitting"),t.emit("clientInitialize")}))}})),e.start(10)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,